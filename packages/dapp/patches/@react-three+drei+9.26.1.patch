diff --git a/node_modules/@react-three/drei/core/AccumulativeShadows.d.ts b/node_modules/@react-three/drei/core/AccumulativeShadows.d.ts
deleted file mode 100644
index 864271a..0000000
--- a/node_modules/@react-three/drei/core/AccumulativeShadows.d.ts
+++ /dev/null
@@ -1,94 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-interface AccumulativeContext {
-    lights: Map<any, any>;
-    temporal: boolean;
-    frames: number;
-    blend: number;
-    count: number;
-    getMesh: () => THREE.Mesh<THREE.PlaneGeometry, SoftShadowMaterialProps & THREE.ShaderMaterial>;
-    reset: () => void;
-    update: (frames?: number) => void;
-}
-interface AccumulativeLightContext {
-    update: () => void;
-}
-declare type SoftShadowMaterialProps = {
-    map: THREE.Texture;
-    color?: ReactThreeFiber.Color;
-    alphaTest?: number;
-    blend?: number;
-};
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            softShadowMaterial: JSX.IntrinsicElements['shaderMaterial'] & SoftShadowMaterialProps;
-        }
-    }
-}
-export declare const accumulativeContext: React.Context<AccumulativeContext>;
-export declare const AccumulativeShadows: React.ForwardRefExoticComponent<Pick<Omit<ReactThreeFiber.ExtendedColors<ReactThreeFiber.Overwrite<Partial<THREE.Group>, ReactThreeFiber.NodeProps<THREE.Group, typeof THREE.Group>>>, ReactThreeFiber.NonFunctionKeys<{
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    frames?: number | undefined;
-    blend?: number | undefined;
-    limit?: number | undefined;
-    scale?: number | undefined;
-    temporal?: boolean | undefined;
-    opacity?: number | undefined;
-    alphaTest?: number | undefined;
-    color?: string | undefined;
-    colorBlend?: number | undefined;
-    resolution?: number | undefined;
-    toneMapped?: boolean | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "alphaTest" | "opacity" | "toneMapped" | "resolution" | "frames" | "blend" | "temporal" | "limit" | "colorBlend"> & React.RefAttributes<AccumulativeContext>>;
-export declare const RandomizedLight: React.ForwardRefExoticComponent<Pick<Omit<ReactThreeFiber.ExtendedColors<ReactThreeFiber.Overwrite<Partial<THREE.Group>, ReactThreeFiber.NodeProps<THREE.Group, typeof THREE.Group>>>, ReactThreeFiber.NonFunctionKeys<{
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    frames?: number | undefined;
-    position?: [x: number, y: number, z: number] | undefined;
-    radius?: number | undefined;
-    amount?: number | undefined;
-    intensity?: number | undefined;
-    ambient?: number | undefined;
-    castShadow?: boolean | undefined;
-    bias?: number | undefined;
-    mapSize?: number | undefined;
-    size?: number | undefined;
-    near?: number | undefined;
-    far?: number | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "size" | "near" | "far" | "intensity" | "bias" | "radius" | "mapSize" | "frames" | "amount" | "ambient"> & React.RefAttributes<AccumulativeLightContext>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/AdaptiveDpr.d.ts b/node_modules/@react-three/drei/core/AdaptiveDpr.d.ts
deleted file mode 100644
index f3bf58f..0000000
--- a/node_modules/@react-three/drei/core/AdaptiveDpr.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export declare function AdaptiveDpr({ pixelated }: {
-    pixelated?: boolean;
-}): null;
diff --git a/node_modules/@react-three/drei/core/AdaptiveEvents.d.ts b/node_modules/@react-three/drei/core/AdaptiveEvents.d.ts
deleted file mode 100644
index c533c15..0000000
--- a/node_modules/@react-three/drei/core/AdaptiveEvents.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare function AdaptiveEvents(): null;
diff --git a/node_modules/@react-three/drei/core/ArcballControls.d.ts b/node_modules/@react-three/drei/core/ArcballControls.d.ts
deleted file mode 100644
index ca41d44..0000000
--- a/node_modules/@react-three/drei/core/ArcballControls.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import { ArcballControls as ArcballControlsImpl } from 'three-stdlib';
-import type { Event, OrthographicCamera, PerspectiveCamera } from 'three';
-export declare type ArcballControlsProps = Omit<ReactThreeFiber.Overwrite<ReactThreeFiber.Object3DNode<ArcballControlsImpl, typeof ArcballControlsImpl>, {
-    target?: ReactThreeFiber.Vector3;
-    camera?: OrthographicCamera | PerspectiveCamera;
-    domElement?: HTMLElement;
-    regress?: boolean;
-    makeDefault?: boolean;
-    onChange?: (e?: Event) => void;
-    onStart?: (e?: Event) => void;
-    onEnd?: (e?: Event) => void;
-}>, 'ref'>;
-export declare const ArcballControls: React.ForwardRefExoticComponent<ArcballControlsProps & React.RefAttributes<ArcballControlsImpl>>;
diff --git a/node_modules/@react-three/drei/core/BBAnchor.d.ts b/node_modules/@react-three/drei/core/BBAnchor.d.ts
deleted file mode 100644
index 30dbcf9..0000000
--- a/node_modules/@react-three/drei/core/BBAnchor.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-/// <reference types="react" />
-import * as THREE from 'three';
-import { GroupProps } from '@react-three/fiber';
-export interface BBAnchorProps extends GroupProps {
-    anchor: THREE.Vector3 | [number, number, number];
-}
-export declare const BBAnchor: ({ anchor, ...props }: BBAnchorProps) => JSX.Element;
diff --git a/node_modules/@react-three/drei/core/Backdrop.d.ts b/node_modules/@react-three/drei/core/Backdrop.d.ts
deleted file mode 100644
index ebdb2d4..0000000
--- a/node_modules/@react-three/drei/core/Backdrop.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import * as React from 'react';
-export declare type BackdropProps = JSX.IntrinsicElements['group'] & {
-    floor?: number;
-    segments?: number;
-    receiveShadow?: boolean;
-    children?: React.ReactNode;
-};
-export declare function Backdrop({ children, floor, segments, receiveShadow, ...props }: {
-    [x: string]: any;
-    children: any;
-    floor?: number | undefined;
-    segments?: number | undefined;
-    receiveShadow: any;
-}): JSX.Element;
diff --git a/node_modules/@react-three/drei/core/BakeShadows.d.ts b/node_modules/@react-three/drei/core/BakeShadows.d.ts
deleted file mode 100644
index 59f9c1a..0000000
--- a/node_modules/@react-three/drei/core/BakeShadows.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare function BakeShadows(): null;
diff --git a/node_modules/@react-three/drei/core/Billboard.d.ts b/node_modules/@react-three/drei/core/Billboard.d.ts
deleted file mode 100644
index 57c489e..0000000
--- a/node_modules/@react-three/drei/core/Billboard.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import * as React from 'react';
-import { Group } from 'three';
-export declare type BillboardProps = {
-    follow?: boolean;
-    lockX?: boolean;
-    lockY?: boolean;
-    lockZ?: boolean;
-} & JSX.IntrinsicElements['group'];
-export declare const Billboard: React.ForwardRefExoticComponent<Pick<BillboardProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "follow" | "lockX" | "lockY" | "lockZ"> & React.RefAttributes<Group>>;
diff --git a/node_modules/@react-three/drei/core/Bounds.d.ts b/node_modules/@react-three/drei/core/Bounds.d.ts
deleted file mode 100644
index 4860c15..0000000
--- a/node_modules/@react-three/drei/core/Bounds.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-/// <reference types="react" />
-import * as THREE from 'three';
-export declare type SizeProps = {
-    box: THREE.Box3;
-    size: THREE.Vector3;
-    center: THREE.Vector3;
-    distance: number;
-};
-export declare type BoundsApi = {
-    getSize: () => SizeProps;
-    refresh(object?: THREE.Object3D | THREE.Box3): any;
-    clip(): any;
-    fit(): any;
-};
-export declare type BoundsProps = JSX.IntrinsicElements['group'] & {
-    damping?: number;
-    fit?: boolean;
-    clip?: boolean;
-    observe?: boolean;
-    margin?: number;
-    eps?: number;
-    onFit?: (data: SizeProps) => void;
-};
-export declare function Bounds({ children, damping, fit, clip, observe, margin, eps, onFit }: BoundsProps): JSX.Element;
-export declare function useBounds(): BoundsApi;
diff --git a/node_modules/@react-three/drei/core/CameraShake.d.ts b/node_modules/@react-three/drei/core/CameraShake.d.ts
deleted file mode 100644
index dc41c57..0000000
--- a/node_modules/@react-three/drei/core/CameraShake.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import * as React from 'react';
-export interface ShakeController {
-    getIntensity: () => number;
-    setIntensity: (val: number) => void;
-}
-export interface CameraShakeProps {
-    intensity?: number;
-    decay?: boolean;
-    decayRate?: number;
-    maxYaw?: number;
-    maxPitch?: number;
-    maxRoll?: number;
-    yawFrequency?: number;
-    pitchFrequency?: number;
-    rollFrequency?: number;
-}
-export declare const CameraShake: React.ForwardRefExoticComponent<CameraShakeProps & React.RefAttributes<ShakeController | undefined>>;
diff --git a/node_modules/@react-three/drei/core/CatmullRomLine.d.ts b/node_modules/@react-three/drei/core/CatmullRomLine.d.ts
deleted file mode 100644
index cbf85f5..0000000
--- a/node_modules/@react-three/drei/core/CatmullRomLine.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import * as React from 'react';
-import { Line2 } from 'three/examples/jsm/lines/Line2';
-import { LineProps } from './Line';
-export declare const CatmullRomLine: React.ForwardRefExoticComponent<Omit<LineProps, "ref"> & {
-    closed?: boolean | undefined;
-    curveType?: "centripetal" | "chordal" | "catmullrom" | undefined;
-    tension?: number | undefined;
-    segments?: number | undefined;
-} & React.RefAttributes<Line2>>;
diff --git a/node_modules/@react-three/drei/core/Center.d.ts b/node_modules/@react-three/drei/core/Center.d.ts
deleted file mode 100644
index 604e28b..0000000
--- a/node_modules/@react-three/drei/core/Center.d.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import { Group } from 'three';
-import * as React from 'react';
-export declare type OnCenterCallbackProps = {
-    parent: THREE.Object3D;
-    container: THREE.Object3D;
-    width: number;
-    height: number;
-    depth: number;
-    boundingBox: THREE.Box3;
-    boundingSphere: THREE.Sphere;
-    center: THREE.Vector3;
-    verticalAlignment: number;
-    horizontalAlignment: number;
-    depthAlignment: number;
-};
-declare type CenterProps = JSX.IntrinsicElements['group'] & {
-    top?: boolean;
-    right?: boolean;
-    bottom?: boolean;
-    left?: boolean;
-    front?: boolean;
-    back?: boolean;
-    precise?: boolean;
-    onCentered?: (props: OnCenterCallbackProps) => void;
-};
-export declare const Center: React.ForwardRefExoticComponent<Pick<CenterProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "left" | "right" | "bottom" | "top" | "front" | "back" | "onCentered" | "precise"> & React.RefAttributes<Group>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Clone.d.ts b/node_modules/@react-three/drei/core/Clone.d.ts
deleted file mode 100644
index da049e5..0000000
--- a/node_modules/@react-three/drei/core/Clone.d.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import * as React from 'react';
-import { MeshProps } from '@react-three/fiber';
-export declare const Clone: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").GroupProps, "children"> & {
-    object: THREE.Object3D | THREE.Object3D[];
-    children?: React.ReactNode;
-    deep?: boolean | "materialsOnly" | "geometriesOnly" | undefined;
-    keys?: string[] | undefined;
-    inject?: React.ReactNode | MeshProps | ((object: THREE.Object3D) => React.ReactNode);
-    castShadow?: boolean | undefined;
-    receiveShadow?: boolean | undefined;
-}, "object" | "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "keys" | "deep" | "inject"> & React.RefAttributes<import("three").Group>>;
diff --git a/node_modules/@react-three/drei/core/Cloud.d.ts b/node_modules/@react-three/drei/core/Cloud.d.ts
deleted file mode 100644
index 765a004..0000000
--- a/node_modules/@react-three/drei/core/Cloud.d.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-/// <reference types="react" />
-export declare function Cloud({ opacity, speed, width, depth, segments, texture, color, depthTest, ...props }: {
-    [x: string]: any;
-    opacity?: number | undefined;
-    speed?: number | undefined;
-    width?: number | undefined;
-    depth?: number | undefined;
-    segments?: number | undefined;
-    texture?: string | undefined;
-    color?: string | undefined;
-    depthTest?: boolean | undefined;
-}): JSX.Element;
diff --git a/node_modules/@react-three/drei/core/ComputedAttribute.d.ts b/node_modules/@react-three/drei/core/ComputedAttribute.d.ts
deleted file mode 100644
index 5511958..0000000
--- a/node_modules/@react-three/drei/core/ComputedAttribute.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { BufferAttributeProps } from '@react-three/fiber';
-import * as React from 'react';
-import { BufferAttribute, BufferGeometry } from 'three';
-declare type Props = {
-    compute: (geometry: BufferGeometry) => BufferAttribute;
-    name: string;
-};
-export declare const ComputedAttribute: ({ compute, name, ...props }: React.PropsWithChildren<Props & BufferAttributeProps>) => JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/ContactShadows.d.ts b/node_modules/@react-three/drei/core/ContactShadows.d.ts
deleted file mode 100644
index 8389e11..0000000
--- a/node_modules/@react-three/drei/core/ContactShadows.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-export declare const ContactShadows: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").GroupProps, "scale"> & {
-    opacity?: number | undefined;
-    width?: number | undefined;
-    height?: number | undefined;
-    blur?: number | undefined;
-    far?: number | undefined;
-    smooth?: boolean | undefined;
-    resolution?: number | undefined;
-    frames?: number | undefined;
-    scale?: number | [x: number, y: number] | undefined;
-    color?: THREE.ColorRepresentation | undefined;
-    depthWrite?: boolean | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "smooth" | "far" | "depthWrite" | "opacity" | "width" | "height" | "blur" | "resolution" | "frames"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/CubeCamera.d.ts b/node_modules/@react-three/drei/core/CubeCamera.d.ts
deleted file mode 100644
index 438a3c7..0000000
--- a/node_modules/@react-three/drei/core/CubeCamera.d.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { Fog, FogExp2, Texture } from 'three';
-import * as React from 'react';
-declare type Props = JSX.IntrinsicElements['group'] & {
-    fog?: Fog | FogExp2;
-    frames?: number;
-    resolution?: number;
-    near?: number;
-    far?: number;
-    children: (tex: Texture) => React.ReactNode;
-};
-export declare function CubeCamera({ children, fog, frames, resolution, near, far, ...props }: Props): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/CubicBezierLine.d.ts b/node_modules/@react-three/drei/core/CubicBezierLine.d.ts
deleted file mode 100644
index 83f5615..0000000
--- a/node_modules/@react-three/drei/core/CubicBezierLine.d.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import * as React from 'react';
-import { Vector3 } from 'three';
-import { Line2 } from 'three/examples/jsm/lines/Line2';
-import { LineProps } from './Line';
-export declare const CubicBezierLine: React.ForwardRefExoticComponent<Omit<LineProps, "ref" | "points"> & {
-    start: Vector3 | [number, number, number];
-    end: Vector3 | [number, number, number];
-    midA: Vector3 | [number, number, number];
-    midB: Vector3 | [number, number, number];
-    segments?: number | undefined;
-} & React.RefAttributes<Line2>>;
diff --git a/node_modules/@react-three/drei/core/CurveModifier.d.ts b/node_modules/@react-three/drei/core/CurveModifier.d.ts
deleted file mode 100644
index 5acfcb4..0000000
--- a/node_modules/@react-three/drei/core/CurveModifier.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { Flow } from 'three-stdlib';
-export interface CurveModifierProps {
-    children: React.ReactElement<JSX.IntrinsicElements['mesh']>;
-    curve?: THREE.Curve<THREE.Vector3>;
-}
-export declare type CurveModifierRef = Pick<Flow, 'moveAlongCurve'>;
-export declare const CurveModifier: React.ForwardRefExoticComponent<CurveModifierProps & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Decal.d.ts b/node_modules/@react-three/drei/core/Decal.d.ts
deleted file mode 100644
index f88a0d2..0000000
--- a/node_modules/@react-three/drei/core/Decal.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import * as FIBER from '@react-three/fiber';
-declare type DecalProps = Omit<JSX.IntrinsicElements['meshStandardMaterial'], 'children'> & {
-    debug?: boolean;
-    mesh?: React.MutableRefObject<THREE.Mesh>;
-    position?: FIBER.Vector3;
-    rotation?: FIBER.Euler | number;
-    scale?: FIBER.Vector3;
-    map?: THREE.Texture;
-    children?: React.ReactNode;
-};
-export declare function Decal({ debug, mesh, children, position, rotation, scale, ...props }: DecalProps): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/Detailed.d.ts b/node_modules/@react-three/drei/core/Detailed.d.ts
deleted file mode 100644
index f294322..0000000
--- a/node_modules/@react-three/drei/core/Detailed.d.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import * as React from 'react';
-import { LOD, Object3D } from 'three';
-export declare const Detailed: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LOD>, import("@react-three/fiber").NodeProps<LOD, typeof LOD>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    children: React.ReactElement<Object3D>[];
-    distances: number[];
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "objects" | "autoUpdate" | "levels" | "isLOD" | "addLevel" | "getCurrentLevel" | "getObjectForDistance" | "update" | "distances"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/DeviceOrientationControls.d.ts b/node_modules/@react-three/drei/core/DeviceOrientationControls.d.ts
deleted file mode 100644
index b67d5b0..0000000
--- a/node_modules/@react-three/drei/core/DeviceOrientationControls.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { DeviceOrientationControls as DeviceOrientationControlsImp } from 'three-stdlib';
-export declare type DeviceOrientationControlsProps = ReactThreeFiber.Object3DNode<DeviceOrientationControlsImp, typeof DeviceOrientationControlsImp> & {
-    camera?: THREE.Camera;
-    onChange?: (e?: THREE.Event) => void;
-};
-export declare const DeviceOrientationControls: React.ForwardRefExoticComponent<Pick<DeviceOrientationControlsProps, "object" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onChange" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "camera" | "enabled" | "connect" | "disconnect" | "update" | "deviceOrientation" | "screenOrientation" | "alphaOffset"> & React.RefAttributes<DeviceOrientationControlsImp>>;
diff --git a/node_modules/@react-three/drei/core/Edges.d.ts b/node_modules/@react-three/drei/core/Edges.d.ts
deleted file mode 100644
index 5dc3854..0000000
--- a/node_modules/@react-three/drei/core/Edges.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-/// <reference types="react" />
-import { ReactThreeFiber } from '@react-three/fiber';
-declare type Props = JSX.IntrinsicElements['lineSegments'] & {
-    threshold?: number;
-    color?: ReactThreeFiber.Color;
-};
-export declare function Edges({ userData, children, geometry, threshold, color, ...props }: Props): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/Effects.d.ts b/node_modules/@react-three/drei/core/Effects.d.ts
deleted file mode 100644
index cb0740d..0000000
--- a/node_modules/@react-three/drei/core/Effects.d.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import * as React from 'react';
-import { WebGLRenderTarget } from 'three';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { EffectComposer, RenderPass, ShaderPass } from 'three-stdlib';
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            effectComposer: ReactThreeFiber.Node<EffectComposer, typeof EffectComposer>;
-            renderPass: ReactThreeFiber.Node<RenderPass, typeof RenderPass>;
-            shaderPass: ReactThreeFiber.Node<ShaderPass, typeof ShaderPass>;
-        }
-    }
-}
-export declare const isWebGL2Available: () => boolean;
-export declare const Effects: React.ForwardRefExoticComponent<Pick<ReactThreeFiber.ExtendedColors<ReactThreeFiber.Overwrite<Partial<EffectComposer<WebGLRenderTarget>>, ReactThreeFiber.NodeProps<EffectComposer<WebGLRenderTarget>, typeof EffectComposer>>> & {
-    multisamping?: number | undefined;
-    encoding?: number | undefined;
-    type?: number | undefined;
-    renderIndex?: number | undefined;
-    disableGamma?: boolean | undefined;
-    disableRenderPass?: boolean | undefined;
-    disableRender?: boolean | undefined;
-    depthBuffer?: boolean | undefined;
-    stencilBuffer?: boolean | undefined;
-    anisotropy?: number | undefined;
-}, "attach" | "args" | "children" | "key" | "onUpdate" | "type" | "anisotropy" | "encoding" | keyof EffectComposer<WebGLRenderTarget> | "multisamping" | "renderIndex" | "disableRender" | "disableGamma" | "disableRenderPass" | "depthBuffer" | "stencilBuffer"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Environment.d.ts b/node_modules/@react-three/drei/core/Environment.d.ts
deleted file mode 100644
index 07a2b32..0000000
--- a/node_modules/@react-three/drei/core/Environment.d.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-import * as React from 'react';
-import { Object3DNode } from '@react-three/fiber';
-import { Texture, Scene, Loader, CubeTexture, TextureEncoding } from 'three';
-import { GroundProjectedEnv as GroundProjectedEnvImpl } from 'three-stdlib';
-import { PresetsType } from '../helpers/environment-assets';
-declare type Props = {
-    children?: React.ReactNode;
-    frames?: number;
-    near?: number;
-    far?: number;
-    resolution?: number;
-    background?: boolean | 'only';
-    map?: THREE.Texture;
-    files?: string | string[];
-    path?: string;
-    preset?: PresetsType;
-    scene?: Scene | React.MutableRefObject<THREE.Scene>;
-    extensions?: (loader: Loader) => void;
-    ground?: boolean | {
-        radius?: number;
-        height?: number;
-        scale?: number;
-    };
-    encoding?: TextureEncoding;
-};
-export declare function EnvironmentMap({ scene, background, map }: Props): null;
-export declare function useEnvironment({ files, path, preset, encoding, extensions, }: Partial<Props>): Texture | CubeTexture;
-export declare function EnvironmentCube({ background, scene, ...rest }: Props): null;
-export declare function EnvironmentPortal({ children, near, far, resolution, frames, map, background, scene, files, path, preset, extensions, }: Props): JSX.Element;
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            groundProjectedEnvImpl: Object3DNode<GroundProjectedEnvImpl, typeof GroundProjectedEnvImpl>;
-        }
-    }
-}
-export declare function Environment(props: Props): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/FirstPersonControls.d.ts b/node_modules/@react-three/drei/core/FirstPersonControls.d.ts
deleted file mode 100644
index 7f80c6e..0000000
--- a/node_modules/@react-three/drei/core/FirstPersonControls.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import * as React from 'react';
-import { Object3DNode } from '@react-three/fiber';
-import { FirstPersonControls as FirstPersonControlImpl } from 'three-stdlib';
-export declare type FirstPersonControlsProps = Object3DNode<FirstPersonControlImpl, typeof FirstPersonControlImpl> & {
-    domElement?: HTMLElement;
-};
-export declare const FirstPersonControls: React.ForwardRefExoticComponent<Pick<FirstPersonControlsProps, "object" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "lookAt" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "enabled" | "connect" | "update" | "domElement" | "movementSpeed" | "autoForward" | "handleResize" | "lookSpeed" | "lookVertical" | "activeLook" | "heightSpeed" | "heightCoef" | "heightMin" | "heightMax" | "constrainVertical" | "verticalMin" | "verticalMax" | "mouseDragOn"> & React.RefAttributes<FirstPersonControlImpl>>;
diff --git a/node_modules/@react-three/drei/core/Float.d.ts b/node_modules/@react-three/drei/core/Float.d.ts
deleted file mode 100644
index 50833e9..0000000
--- a/node_modules/@react-three/drei/core/Float.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-export declare type FloatProps = JSX.IntrinsicElements['group'] & {
-    speed?: number;
-    rotationIntensity?: number;
-    floatIntensity?: number;
-    children?: React.ReactNode;
-    floatingRange?: [number?, number?];
-};
-export declare const Float: React.ForwardRefExoticComponent<Pick<FloatProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "speed" | "rotationIntensity" | "floatIntensity" | "floatingRange"> & React.RefAttributes<THREE.Group>>;
diff --git a/node_modules/@react-three/drei/core/FlyControls.d.ts b/node_modules/@react-three/drei/core/FlyControls.d.ts
deleted file mode 100644
index ccc4a4d..0000000
--- a/node_modules/@react-three/drei/core/FlyControls.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { FlyControls as FlyControlsImpl } from 'three-stdlib';
-export declare type FlyControlsProps = ReactThreeFiber.Object3DNode<FlyControlsImpl, typeof FlyControlsImpl> & {
-    onChange?: (e?: THREE.Event) => void;
-    domElement?: HTMLElement;
-};
-export declare const FlyControls: React.ForwardRefExoticComponent<Pick<FlyControlsProps, "object" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onChange" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "update" | "domElement" | "movementSpeed" | "rollSpeed" | "dragToLook" | "autoForward"> & React.RefAttributes<FlyControlsImpl>>;
diff --git a/node_modules/@react-three/drei/core/GizmoHelper.d.ts b/node_modules/@react-three/drei/core/GizmoHelper.d.ts
deleted file mode 100644
index 7fd6125..0000000
--- a/node_modules/@react-three/drei/core/GizmoHelper.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { Intersection, Raycaster, Vector3 } from 'three';
-declare type GizmoHelperContext = {
-    tweenCamera: (direction: Vector3) => void;
-    raycast: (raycaster: Raycaster, intersects: Intersection[]) => void;
-};
-export declare const useGizmoContext: () => GizmoHelperContext;
-export declare type GizmoHelperProps = JSX.IntrinsicElements['group'] & {
-    alignment?: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left' | 'bottom-center' | 'center-right' | 'center-left' | 'center-center' | 'top-center';
-    margin?: [number, number];
-    renderPriority?: number;
-    autoClear?: boolean;
-    onUpdate?: () => void;
-    onTarget?: () => Vector3;
-};
-export declare const GizmoHelper: ({ alignment, margin, renderPriority, autoClear, onUpdate, onTarget, children: GizmoHelperComponent, }: GizmoHelperProps) => any;
-export {};
diff --git a/node_modules/@react-three/drei/core/GizmoViewcube.d.ts b/node_modules/@react-three/drei/core/GizmoViewcube.d.ts
deleted file mode 100644
index 6fa1c16..0000000
--- a/node_modules/@react-three/drei/core/GizmoViewcube.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-/// <reference types="react" />
-import { ThreeEvent } from '@react-three/fiber';
-declare type GenericProps = {
-    font?: string;
-    opacity?: number;
-    color?: string;
-    hoverColor?: string;
-    textColor?: string;
-    strokeColor?: string;
-    onClick?: (e: ThreeEvent<MouseEvent>) => null;
-    faces?: string[];
-};
-export declare const GizmoViewcube: (props: GenericProps) => JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/GizmoViewport.d.ts b/node_modules/@react-three/drei/core/GizmoViewport.d.ts
deleted file mode 100644
index ed0c62a..0000000
--- a/node_modules/@react-three/drei/core/GizmoViewport.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-/// <reference types="react" />
-import { ThreeEvent } from '@react-three/fiber';
-declare type GizmoViewportProps = JSX.IntrinsicElements['group'] & {
-    axisColors?: [string, string, string];
-    axisScale?: [number, number, number];
-    labels?: [string, string, string];
-    axisHeadScale?: number;
-    labelColor?: string;
-    hideNegativeAxes?: boolean;
-    hideAxisHeads?: boolean;
-    disabled?: boolean;
-    font?: string;
-    onClick?: (e: ThreeEvent<MouseEvent>) => null;
-};
-export declare const GizmoViewport: ({ hideNegativeAxes, hideAxisHeads, disabled, font, axisColors, axisHeadScale, axisScale, labels, labelColor, onClick, ...props }: GizmoViewportProps) => JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/GradientTexture.d.ts b/node_modules/@react-three/drei/core/GradientTexture.d.ts
deleted file mode 100644
index a8b82c2..0000000
--- a/node_modules/@react-three/drei/core/GradientTexture.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-/// <reference types="react" />
-declare type Props = {
-    stops: Array<number>;
-    colors: Array<string>;
-    attach?: string;
-    size?: number;
-} & JSX.IntrinsicElements['texture'];
-export declare function GradientTexture({ stops, colors, size, ...props }: Props): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/Image.d.ts b/node_modules/@react-three/drei/core/Image.d.ts
deleted file mode 100644
index fa8349b..0000000
--- a/node_modules/@react-three/drei/core/Image.d.ts
+++ /dev/null
@@ -1,96 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { Color } from '@react-three/fiber';
-export declare type ImageProps = JSX.IntrinsicElements['mesh'] & {
-    segments?: number;
-    scale?: number | [number, number];
-    color?: Color;
-    zoom?: number;
-    grayscale?: number;
-    toneMapped?: boolean;
-    transparent?: boolean;
-    opacity?: number;
-} & ({
-    texture: THREE.Texture;
-    url?: never;
-} | {
-    texture?: never;
-    url: string;
-});
-declare type ImageMaterialType = JSX.IntrinsicElements['shaderMaterial'] & {
-    scale?: number[];
-    imageBounds?: number[];
-    color?: Color;
-    map: THREE.Texture;
-    zoom?: number;
-    grayscale?: number;
-};
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            imageMaterial: ImageMaterialType;
-        }
-    }
-}
-export declare const Image: React.ForwardRefExoticComponent<(Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>, import("@react-three/fiber").NodeProps<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>, typeof THREE.Mesh>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    segments?: number | undefined;
-    scale?: number | [number, number] | undefined;
-    color?: Color | undefined;
-    zoom?: number | undefined;
-    grayscale?: number | undefined;
-    toneMapped?: boolean | undefined;
-    transparent?: boolean | undefined;
-    opacity?: number | undefined;
-} & {
-    texture: THREE.Texture;
-    url?: undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "transparent" | "zoom" | "material" | "texture" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "opacity" | "toneMapped" | "url" | "segments" | "grayscale"> | Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>, import("@react-three/fiber").NodeProps<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>, typeof THREE.Mesh>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    segments?: number | undefined;
-    scale?: number | [number, number] | undefined;
-    color?: Color | undefined;
-    zoom?: number | undefined;
-    grayscale?: number | undefined;
-    toneMapped?: boolean | undefined;
-    transparent?: boolean | undefined;
-    opacity?: number | undefined;
-} & {
-    texture?: undefined;
-    url: string;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "transparent" | "zoom" | "material" | "texture" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "opacity" | "toneMapped" | "url" | "segments" | "grayscale">) & React.RefAttributes<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Instances.d.ts b/node_modules/@react-three/drei/core/Instances.d.ts
deleted file mode 100644
index 1054966..0000000
--- a/node_modules/@react-three/drei/core/Instances.d.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { Position } from '../helpers/Position';
-declare type Api = {
-    getParent: () => React.MutableRefObject<InstancedMesh>;
-    subscribe: (ref: any) => void;
-};
-declare type InstancesProps = JSX.IntrinsicElements['instancedMesh'] & {
-    range?: number;
-    limit?: number;
-    frames?: number;
-};
-declare type InstancedMesh = Omit<THREE.InstancedMesh, 'instanceMatrix' | 'instanceColor'> & {
-    instanceMatrix: THREE.InstancedBufferAttribute;
-    instanceColor: THREE.InstancedBufferAttribute;
-};
-declare const Instance: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<Position>, import("@react-three/fiber").NodeProps<Position, typeof Position>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    context?: React.Context<Api> | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "instance" | "instanceKey" | "geometry" | "context"> & React.RefAttributes<unknown>>;
-declare const Instances: React.ForwardRefExoticComponent<Pick<InstancesProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "range" | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "count" | "instanceColor" | "instanceMatrix" | "isInstancedMesh" | "getColorAt" | "getMatrixAt" | "setColorAt" | "setMatrixAt" | "frames" | "limit"> & React.RefAttributes<InstancedMesh>>;
-declare function Merged({ meshes, children, ...props }: {
-    [x: string]: any;
-    meshes: any;
-    children: any;
-}): JSX.Element;
-export { Instances, Instance, Merged };
diff --git a/node_modules/@react-three/drei/core/Lightformer.d.ts b/node_modules/@react-three/drei/core/Lightformer.d.ts
deleted file mode 100644
index a0413d5..0000000
--- a/node_modules/@react-three/drei/core/Lightformer.d.ts
+++ /dev/null
@@ -1,41 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-export declare type LightProps = JSX.IntrinsicElements['mesh'] & {
-    args?: any[];
-    map?: THREE.Texture;
-    toneMapped?: boolean;
-    color?: ReactThreeFiber.Color;
-    form?: 'circle' | 'ring' | 'rect' | any;
-    scale?: number | [number, number, number] | [number, number];
-    intensity?: number;
-    target?: [number, number, number] | THREE.Vector3;
-};
-export declare const Lightformer: React.ForwardRefExoticComponent<Pick<Omit<ReactThreeFiber.ExtendedColors<ReactThreeFiber.Overwrite<Partial<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>, ReactThreeFiber.NodeProps<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>, typeof THREE.Mesh>>>, ReactThreeFiber.NonFunctionKeys<{
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    args?: any[] | undefined;
-    map?: THREE.Texture | undefined;
-    toneMapped?: boolean | undefined;
-    color?: ReactThreeFiber.Color | undefined;
-    form?: 'circle' | 'ring' | 'rect' | any;
-    scale?: number | [number, number] | [number, number, number] | undefined;
-    intensity?: number | undefined;
-    target?: THREE.Vector3 | [number, number, number] | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "form" | "map" | "material" | "geometry" | "intensity" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "toneMapped" | "target"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Line.d.ts b/node_modules/@react-three/drei/core/Line.d.ts
deleted file mode 100644
index 6fd54c7..0000000
--- a/node_modules/@react-three/drei/core/Line.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import * as React from 'react';
-import { Vector3, Color } from 'three';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { LineMaterial, LineMaterialParameters, Line2 } from 'three-stdlib';
-export declare type LineProps = {
-    points: Array<Vector3 | [number, number, number]>;
-    vertexColors?: Array<Color | [number, number, number]>;
-    lineWidth?: number;
-} & Omit<LineMaterialParameters, 'vertexColors'> & Omit<ReactThreeFiber.Object3DNode<Line2, typeof Line2>, 'args'> & Omit<ReactThreeFiber.Object3DNode<LineMaterial, [LineMaterialParameters]>, 'color' | 'vertexColors' | 'args'>;
-export declare const Line: React.ForwardRefExoticComponent<Pick<LineProps, "visible" | "attach" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "transparent" | "dashed" | "points" | "material" | "fog" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "computeLineDistances" | "alphaTest" | "alphaToCoverage" | "blendDst" | "blendDstAlpha" | "blendEquation" | "blendEquationAlpha" | "blending" | "blendSrc" | "blendSrcAlpha" | "clipIntersection" | "clippingPlanes" | "clipShadows" | "colorWrite" | "defines" | "depthFunc" | "depthTest" | "depthWrite" | "stencilWrite" | "stencilFunc" | "stencilRef" | "stencilWriteMask" | "stencilFuncMask" | "stencilFail" | "stencilZFail" | "stencilZPass" | "isMaterial" | "needsUpdate" | "opacity" | "polygonOffset" | "polygonOffsetFactor" | "polygonOffsetUnits" | "precision" | "premultipliedAlpha" | "dithering" | "side" | "shadowSide" | "toneMapped" | "vertexColors" | "version" | "onBeforeCompile" | "customProgramCacheKey" | "setValues" | "uniforms" | "vertexShader" | "fragmentShader" | "linewidth" | "wireframe" | "wireframeLinewidth" | "lights" | "clipping" | "derivatives" | "extensions" | "defaultAttributeValues" | "index0AttributeName" | "uniformsNeedUpdate" | "glslVersion" | "isShaderMaterial" | "dashSize" | "gapSize" | "format" | "dashScale" | "dashOffset" | "resolution" | "worldUnits" | "isLine2" | "isLineSegments2" | "isLineMaterial" | "lineWidth"> & React.RefAttributes<Line2>>;
diff --git a/node_modules/@react-three/drei/core/MapControls.d.ts b/node_modules/@react-three/drei/core/MapControls.d.ts
deleted file mode 100644
index 4390721..0000000
--- a/node_modules/@react-three/drei/core/MapControls.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { MapControls as MapControlsImpl } from 'three-stdlib';
-export declare type MapControlsProps = ReactThreeFiber.Overwrite<ReactThreeFiber.Object3DNode<MapControlsImpl, typeof MapControlsImpl>, {
-    target?: ReactThreeFiber.Vector3;
-    camera?: THREE.Camera;
-    makeDefault?: boolean;
-    onChange?: (e?: THREE.Event) => void;
-    onStart?: (e?: THREE.Event) => void;
-    onEnd?: (e?: THREE.Event) => void;
-    domElement?: HTMLElement;
-}>;
-export declare const MapControls: React.ForwardRefExoticComponent<Pick<MapControlsProps, "object" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onChange" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "camera" | "reset" | "enabled" | "connect" | "update" | "target" | "onStart" | "keys" | "touches" | "makeDefault" | "domElement" | "minDistance" | "maxDistance" | "minZoom" | "maxZoom" | "minPolarAngle" | "maxPolarAngle" | "minAzimuthAngle" | "maxAzimuthAngle" | "enableDamping" | "dampingFactor" | "enableZoom" | "zoomSpeed" | "enableRotate" | "rotateSpeed" | "enablePan" | "panSpeed" | "screenSpacePanning" | "keyPanSpeed" | "autoRotate" | "autoRotateSpeed" | "reverseOrbit" | "mouseButtons" | "target0" | "position0" | "zoom0" | "_domElementKeyEvents" | "getPolarAngle" | "getAzimuthalAngle" | "setPolarAngle" | "setAzimuthalAngle" | "getDistance" | "listenToKeyEvents" | "saveState" | "onEnd"> & React.RefAttributes<MapControlsImpl>>;
diff --git a/node_modules/@react-three/drei/core/MarchingCubes.d.ts b/node_modules/@react-three/drei/core/MarchingCubes.d.ts
deleted file mode 100644
index 98c2951..0000000
--- a/node_modules/@react-three/drei/core/MarchingCubes.d.ts
+++ /dev/null
@@ -1,78 +0,0 @@
-import * as React from 'react';
-import { Color, Group } from 'three';
-export declare type MarchingCubesProps = {
-    resolution?: number;
-    maxPolyCount?: number;
-    enableUvs?: boolean;
-    enableColors?: boolean;
-} & JSX.IntrinsicElements['group'];
-export declare const MarchingCubes: React.ForwardRefExoticComponent<Pick<{
-    resolution?: number | undefined;
-    maxPolyCount?: number | undefined;
-    enableUvs?: boolean | undefined;
-    enableColors?: boolean | undefined;
-} & Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<Group>, import("@react-three/fiber").NodeProps<Group, typeof Group>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "resolution" | "maxPolyCount" | "enableUvs" | "enableColors"> & React.RefAttributes<unknown>>;
-export declare const MarchingCube: React.ForwardRefExoticComponent<Pick<{
-    strength?: number | undefined;
-    subtract?: number | undefined;
-    color?: Color | undefined;
-} & Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<Group>, import("@react-three/fiber").NodeProps<Group, typeof Group>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "subtract" | "strength"> & React.RefAttributes<unknown>>;
-export declare const MarchingPlane: React.ForwardRefExoticComponent<Pick<{
-    planeType?: "x" | "y" | "z" | undefined;
-    strength?: number | undefined;
-    subtract?: number | undefined;
-} & Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<Group>, import("@react-three/fiber").NodeProps<Group, typeof Group>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "subtract" | "strength" | "planeType"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Mask.d.ts b/node_modules/@react-three/drei/core/Mask.d.ts
deleted file mode 100644
index fee7c63..0000000
--- a/node_modules/@react-three/drei/core/Mask.d.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-declare type MaskSpread = {
-    colorWrite: boolean;
-    depthWrite: boolean;
-    stencilWrite: boolean;
-    stencilRef: number;
-    stencilFunc: THREE.StencilFunc;
-    stencilFail: THREE.StencilOp;
-    stencilZFail: THREE.StencilOp;
-    stencilZPass: THREE.StencilOp;
-};
-declare type Props = Omit<JSX.IntrinsicElements['mesh'], 'children'> & {
-    id: number;
-    colorWrite?: boolean;
-    depthWrite?: boolean;
-    children: ((spread: MaskSpread) => React.ReactNode) | React.ReactNode;
-};
-export declare function Mask({ id, children, colorWrite, depthWrite, ...props }: Props): JSX.Element;
-export declare function useMask(id: number, inverse?: boolean): {
-    stencilWrite: boolean;
-    stencilRef: number;
-    stencilFunc: THREE.StencilFunc;
-    stencilFail: THREE.StencilOp;
-    stencilZFail: THREE.StencilOp;
-    stencilZPass: THREE.StencilOp;
-};
-export {};
diff --git a/node_modules/@react-three/drei/core/MeshDistortMaterial.d.ts b/node_modules/@react-three/drei/core/MeshDistortMaterial.d.ts
deleted file mode 100644
index 86f7f10..0000000
--- a/node_modules/@react-three/drei/core/MeshDistortMaterial.d.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import * as React from 'react';
-import { MeshPhysicalMaterial, MeshPhysicalMaterialParameters } from 'three';
-declare type DistortMaterialType = JSX.IntrinsicElements['meshPhysicalMaterial'] & {
-    time?: number;
-    distort?: number;
-    radius?: number;
-};
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            distortMaterialImpl: DistortMaterialType;
-        }
-    }
-}
-export declare const MeshDistortMaterial: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<MeshPhysicalMaterial>, import("@react-three/fiber").NodeProps<MeshPhysicalMaterial, [MeshPhysicalMaterialParameters]>>> & {
-    time?: number | undefined;
-    distort?: number | undefined;
-    radius?: number | undefined;
-} & {
-    speed?: number | undefined;
-    factor?: number | undefined;
-}, "attach" | "args" | "children" | "key" | "onUpdate" | "time" | keyof MeshPhysicalMaterial | "radius" | "speed" | "distort" | "factor"> & React.RefAttributes<unknown>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/MeshReflectorMaterial.d.ts b/node_modules/@react-three/drei/core/MeshReflectorMaterial.d.ts
deleted file mode 100644
index fcea2ca..0000000
--- a/node_modules/@react-three/drei/core/MeshReflectorMaterial.d.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import * as React from 'react';
-import { Texture } from 'three';
-import { MeshReflectorMaterialProps, MeshReflectorMaterial as MeshReflectorMaterialImpl } from '../materials/MeshReflectorMaterial';
-declare type Props = JSX.IntrinsicElements['meshStandardMaterial'] & {
-    resolution?: number;
-    mixBlur?: number;
-    mixStrength?: number;
-    blur?: [number, number] | number;
-    mirror: number;
-    minDepthThreshold?: number;
-    maxDepthThreshold?: number;
-    depthScale?: number;
-    depthToBlurRatioBias?: number;
-    distortionMap?: Texture;
-    distortion?: number;
-    mixContrast?: number;
-    reflectorOffset?: number;
-};
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshReflectorMaterialImpl: MeshReflectorMaterialProps;
-        }
-    }
-}
-export declare const MeshReflectorMaterial: React.ForwardRefExoticComponent<Pick<Props, "attach" | "args" | "children" | "key" | "onUpdate" | keyof import("three").MeshStandardMaterial | "blur" | "resolution" | "minDepthThreshold" | "maxDepthThreshold" | "depthScale" | "depthToBlurRatioBias" | "mixBlur" | "mixStrength" | "mirror" | "distortion" | "mixContrast" | "distortionMap" | "reflectorOffset"> & React.RefAttributes<MeshReflectorMaterialImpl>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/MeshWobbleMaterial.d.ts b/node_modules/@react-three/drei/core/MeshWobbleMaterial.d.ts
deleted file mode 100644
index a2a5326..0000000
--- a/node_modules/@react-three/drei/core/MeshWobbleMaterial.d.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import * as React from 'react';
-import { MeshStandardMaterial, MeshStandardMaterialParameters } from 'three';
-declare type WobbleMaterialType = JSX.IntrinsicElements['meshStandardMaterial'] & {
-    time?: number;
-    factor?: number;
-    speed?: number;
-};
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            wobbleMaterialImpl: WobbleMaterialType;
-        }
-    }
-}
-export declare const MeshWobbleMaterial: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<MeshStandardMaterial>, import("@react-three/fiber").NodeProps<MeshStandardMaterial, [MeshStandardMaterialParameters]>>> & {
-    time?: number | undefined;
-    factor?: number | undefined;
-    speed?: number | undefined;
-} & {
-    speed?: number | undefined;
-    factor?: number | undefined;
-}, "attach" | "args" | "children" | "key" | "onUpdate" | "time" | keyof MeshStandardMaterial | "speed" | "factor"> & React.RefAttributes<unknown>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/OrbitControls.d.ts b/node_modules/@react-three/drei/core/OrbitControls.d.ts
deleted file mode 100644
index 27b7a73..0000000
--- a/node_modules/@react-three/drei/core/OrbitControls.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import type { Camera, Event } from 'three';
-import { OrbitControls as OrbitControlsImpl } from 'three-stdlib';
-export declare type OrbitControlsProps = Omit<ReactThreeFiber.Overwrite<ReactThreeFiber.Object3DNode<OrbitControlsImpl, typeof OrbitControlsImpl>, {
-    camera?: Camera;
-    domElement?: HTMLElement;
-    enableDamping?: boolean;
-    makeDefault?: boolean;
-    onChange?: (e?: Event) => void;
-    onEnd?: (e?: Event) => void;
-    onStart?: (e?: Event) => void;
-    regress?: boolean;
-    target?: ReactThreeFiber.Vector3;
-}>, 'ref'>;
-export declare const OrbitControls: React.ForwardRefExoticComponent<OrbitControlsProps & React.RefAttributes<OrbitControlsImpl>>;
diff --git a/node_modules/@react-three/drei/core/OrthographicCamera.d.ts b/node_modules/@react-three/drei/core/OrthographicCamera.d.ts
deleted file mode 100644
index 346ff10..0000000
--- a/node_modules/@react-three/drei/core/OrthographicCamera.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import * as React from 'react';
-import { OrthographicCamera as OrthographicCameraImpl } from 'three';
-export declare const OrthographicCamera: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<OrthographicCameraImpl>, import("@react-three/fiber").NodeProps<OrthographicCameraImpl, typeof OrthographicCameraImpl>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    makeDefault?: boolean | undefined;
-    manual?: boolean | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "left" | "right" | "bottom" | "top" | "manual" | "zoom" | "view" | "matrixWorldInverse" | "projectionMatrix" | "projectionMatrixInverse" | "isCamera" | "near" | "far" | "setViewOffset" | "clearViewOffset" | "updateProjectionMatrix" | "isOrthographicCamera" | "makeDefault"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/PerformanceMonitor.d.ts b/node_modules/@react-three/drei/core/PerformanceMonitor.d.ts
deleted file mode 100644
index cc6351e..0000000
--- a/node_modules/@react-three/drei/core/PerformanceMonitor.d.ts
+++ /dev/null
@@ -1,36 +0,0 @@
-import * as React from 'react';
-declare type PerformanceMonitorHookApi = {
-    onIncline: (api: PerformanceMonitorApi) => void;
-    onDecline: (api: PerformanceMonitorApi) => void;
-    onChange: (api: PerformanceMonitorApi) => void;
-    onFallback: (api: PerformanceMonitorApi) => void;
-};
-export declare type PerformanceMonitorApi = {
-    fps: number;
-    factor: number;
-    refreshrate: number;
-    frames: number[];
-    averages: number[];
-    index: number;
-    flipped: number;
-    fallback: boolean;
-    subscriptions: Map<Symbol, Partial<PerformanceMonitorHookApi>>;
-    subscribe: (ref: React.MutableRefObject<Partial<PerformanceMonitorHookApi>>) => () => void;
-};
-declare type PerformanceMonitorProps = {
-    ms?: number;
-    iterations?: number;
-    threshold?: number;
-    bounds?: (refreshrate: number) => [lower: number, upper: number];
-    flipflops?: number;
-    factor?: number;
-    step?: number;
-    onIncline?: (api: PerformanceMonitorApi) => void;
-    onDecline?: (api: PerformanceMonitorApi) => void;
-    onChange?: (api: PerformanceMonitorApi) => void;
-    onFallback?: (api: PerformanceMonitorApi) => void;
-    children?: React.ReactNode;
-};
-export declare function PerformanceMonitor({ iterations, ms, threshold, step, factor: _factor, flipflops, bounds, onIncline, onDecline, onChange, onFallback, children, }: PerformanceMonitorProps): JSX.Element;
-export declare function usePerformanceMonitor({ onIncline, onDecline, onChange, onFallback, }: Partial<PerformanceMonitorHookApi>): void;
-export {};
diff --git a/node_modules/@react-three/drei/core/PerspectiveCamera.d.ts b/node_modules/@react-three/drei/core/PerspectiveCamera.d.ts
deleted file mode 100644
index e5d18b3..0000000
--- a/node_modules/@react-three/drei/core/PerspectiveCamera.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import * as React from 'react';
-import { PerspectiveCamera as PerspectiveCameraImpl } from 'three';
-export declare const PerspectiveCamera: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<PerspectiveCameraImpl>, import("@react-three/fiber").NodeProps<PerspectiveCameraImpl, typeof PerspectiveCameraImpl>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    makeDefault?: boolean | undefined;
-    manual?: boolean | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "manual" | "zoom" | "view" | "matrixWorldInverse" | "projectionMatrix" | "projectionMatrixInverse" | "isCamera" | "near" | "far" | "isPerspectiveCamera" | "fov" | "aspect" | "focus" | "filmGauge" | "filmOffset" | "setFocalLength" | "getFocalLength" | "getEffectiveFOV" | "getFilmWidth" | "getFilmHeight" | "setViewOffset" | "clearViewOffset" | "updateProjectionMatrix" | "setLens" | "makeDefault"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/PointMaterial.d.ts b/node_modules/@react-three/drei/core/PointMaterial.d.ts
deleted file mode 100644
index bdaa1cf..0000000
--- a/node_modules/@react-three/drei/core/PointMaterial.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { PrimitiveProps } from '@react-three/fiber';
-declare type PointMaterialType = JSX.IntrinsicElements['pointsMaterial'];
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            pointMaterialImpl: PointMaterialType;
-        }
-    }
-}
-export declare class PointMaterialImpl extends THREE.PointsMaterial {
-    constructor(props: any);
-}
-export declare const PointMaterial: React.ForwardRefExoticComponent<Pick<Omit<PrimitiveProps, "object" | "attach">, string | number> & React.RefAttributes<PointMaterialImpl>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/PointerLockControls.d.ts b/node_modules/@react-three/drei/core/PointerLockControls.d.ts
deleted file mode 100644
index 3b1cf85..0000000
--- a/node_modules/@react-three/drei/core/PointerLockControls.d.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { PointerLockControls as PointerLockControlsImpl } from 'three-stdlib';
-export declare type PointerLockControlsProps = ReactThreeFiber.Object3DNode<PointerLockControlsImpl, typeof PointerLockControlsImpl> & {
-    domElement?: HTMLElement;
-    selector?: string;
-    enabled?: boolean;
-    camera?: THREE.Camera;
-    onChange?: (e?: THREE.Event) => void;
-    onLock?: (e?: THREE.Event) => void;
-    onUnlock?: (e?: THREE.Event) => void;
-};
-export declare const PointerLockControls: React.ForwardRefExoticComponent<Pick<PointerLockControlsProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onChange" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "camera" | "enabled" | "connect" | "disconnect" | "domElement" | "minPolarAngle" | "maxPolarAngle" | "isLocked" | "getDirection" | "moveForward" | "moveRight" | "lock" | "unlock" | "selector" | "onLock" | "onUnlock"> & React.RefAttributes<PointerLockControlsImpl>>;
diff --git a/node_modules/@react-three/drei/core/Points.d.ts b/node_modules/@react-three/drei/core/Points.d.ts
deleted file mode 100644
index ac14786..0000000
--- a/node_modules/@react-three/drei/core/Points.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-declare type PointsInstancesProps = JSX.IntrinsicElements['points'] & {
-    range?: number;
-    limit?: number;
-};
-export declare const Point: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
-declare type PointsBuffersProps = JSX.IntrinsicElements['points'] & {
-    positions: Float32Array;
-    colors?: Float32Array;
-    sizes?: Float32Array;
-    stride?: 2 | 3;
-};
-export declare const PointsBuffer: React.ForwardRefExoticComponent<Pick<PointsBuffersProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "isPoints" | "colors" | "stride" | "positions" | "sizes"> & React.RefAttributes<THREE.Points<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
-export declare const Points: React.ForwardRefExoticComponent<(Pick<PointsInstancesProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "range" | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "isPoints" | "limit"> | Pick<PointsBuffersProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "isPoints" | "colors" | "stride" | "positions" | "sizes">) & React.RefAttributes<THREE.Points<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/PositionalAudio.d.ts b/node_modules/@react-three/drei/core/PositionalAudio.d.ts
deleted file mode 100644
index 5f8c217..0000000
--- a/node_modules/@react-three/drei/core/PositionalAudio.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import * as React from 'react';
-import { PositionalAudio as PositionalAudioImpl } from 'three';
-export declare const PositionalAudio: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<PositionalAudioImpl>, import("@react-three/fiber").NodeProps<PositionalAudioImpl, typeof PositionalAudioImpl>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    url: string;
-    distance?: number | undefined;
-    loop?: boolean | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onEnded" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "source" | "stop" | "context" | "gain" | "setFilter" | "getFilter" | "panner" | "getOutput" | "setRefDistance" | "getRefDistance" | "setRolloffFactor" | "getRolloffFactor" | "setDistanceModel" | "getDistanceModel" | "setMaxDistance" | "getMaxDistance" | "setDirectionalCone" | "listener" | "autoplay" | "buffer" | "detune" | "loop" | "loopStart" | "loopEnd" | "offset" | "duration" | "playbackRate" | "isPlaying" | "hasPlaybackControl" | "sourceType" | "filters" | "setNodeSource" | "setMediaElementSource" | "setMediaStreamSource" | "setBuffer" | "play" | "pause" | "connect" | "disconnect" | "setDetune" | "getDetune" | "getFilters" | "setFilters" | "setPlaybackRate" | "getPlaybackRate" | "getLoop" | "setLoop" | "setLoopStart" | "setLoopEnd" | "getVolume" | "setVolume" | "load" | "distance" | "url"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Preload.d.ts b/node_modules/@react-three/drei/core/Preload.d.ts
deleted file mode 100644
index f9dc6a1..0000000
--- a/node_modules/@react-three/drei/core/Preload.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { Object3D, Camera } from 'three';
-declare type Props = {
-    all?: boolean;
-    scene?: Object3D;
-    camera?: Camera;
-};
-export declare function Preload({ all, scene, camera }: Props): null;
-export {};
diff --git a/node_modules/@react-three/drei/core/QuadraticBezierLine.d.ts b/node_modules/@react-three/drei/core/QuadraticBezierLine.d.ts
deleted file mode 100644
index b76b29c..0000000
--- a/node_modules/@react-three/drei/core/QuadraticBezierLine.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import * as React from 'react';
-import { Vector3 } from 'three';
-import { Line2 } from 'three/examples/jsm/lines/Line2';
-import { LineProps } from './Line';
-import { Object3DNode } from '@react-three/fiber';
-declare type Line2Props = Object3DNode<Line2, typeof Line2> & {
-    setPoints: (start: Vector3 | [number, number, number], end: Vector3 | [number, number, number], mid: Vector3 | [number, number, number]) => void;
-};
-export declare const QuadraticBezierLine: React.ForwardRefExoticComponent<Omit<LineProps, "ref" | "points"> & {
-    start: Vector3 | [number, number, number];
-    end: Vector3 | [number, number, number];
-    mid?: Vector3 | [number, number, number] | undefined;
-    segments?: number | undefined;
-} & React.RefAttributes<Line2Props>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Reflector.d.ts b/node_modules/@react-three/drei/core/Reflector.d.ts
deleted file mode 100644
index 8825cb1..0000000
--- a/node_modules/@react-three/drei/core/Reflector.d.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import * as React from 'react';
-import { Mesh, Texture } from 'three';
-import { MeshReflectorMaterialProps } from '../materials/MeshReflectorMaterial';
-export declare type ReflectorProps = Omit<JSX.IntrinsicElements['mesh'], 'args' | 'children'> & Pick<JSX.IntrinsicElements['planeGeometry'], 'args'> & {
-    resolution?: number;
-    mixBlur?: number;
-    mixStrength?: number;
-    blur?: [number, number] | number;
-    mirror: number;
-    minDepthThreshold?: number;
-    maxDepthThreshold?: number;
-    depthScale?: number;
-    depthToBlurRatioBias?: number;
-    debug?: number;
-    distortionMap?: Texture;
-    distortion?: number;
-    mixContrast?: number;
-    children?: {
-        (Component: React.ElementType<JSX.IntrinsicElements['meshReflectorMaterial']>, ComponentProps: MeshReflectorMaterialProps): JSX.Element | null;
-    };
-};
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            meshReflectorMaterial: MeshReflectorMaterialProps;
-        }
-    }
-}
-export declare const Reflector: React.ForwardRefExoticComponent<Pick<ReflectorProps, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "blur" | "resolution" | "debug" | "minDepthThreshold" | "maxDepthThreshold" | "depthScale" | "depthToBlurRatioBias" | "mixBlur" | "mixStrength" | "mirror" | "distortion" | "mixContrast" | "distortionMap"> & React.RefAttributes<Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>>>;
diff --git a/node_modules/@react-three/drei/core/RenderTexture.d.ts b/node_modules/@react-three/drei/core/RenderTexture.d.ts
deleted file mode 100644
index 8e3d55a..0000000
--- a/node_modules/@react-three/drei/core/RenderTexture.d.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-export declare const RenderTexture: React.ForwardRefExoticComponent<THREE.Texture & {
-    width?: number | undefined;
-    height?: number | undefined;
-    samples?: number | undefined;
-    renderPriority?: number | undefined;
-    eventPriority?: number | undefined;
-    frames?: number | undefined;
-    children: React.ReactNode;
-} & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/RoundedBox.d.ts b/node_modules/@react-three/drei/core/RoundedBox.d.ts
deleted file mode 100644
index acf13b9..0000000
--- a/node_modules/@react-three/drei/core/RoundedBox.d.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import * as React from 'react';
-import { Mesh } from 'three';
-import { NamedArrayTuple } from '../helpers/ts-utils';
-declare type Props = {
-    args?: NamedArrayTuple<(width?: number, height?: number, depth?: number) => void>;
-    radius?: number;
-    smoothness?: number;
-    steps?: number;
-} & Omit<JSX.IntrinsicElements['mesh'], 'args'>;
-export declare const RoundedBox: React.ForwardRefExoticComponent<Pick<Props, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "radius" | "steps" | "smoothness"> & React.RefAttributes<Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Sampler.d.ts b/node_modules/@react-three/drei/core/Sampler.d.ts
deleted file mode 100644
index 51091e5..0000000
--- a/node_modules/@react-three/drei/core/Sampler.d.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import * as React from 'react';
-import { Color, InstancedBufferAttribute, InstancedMesh, Mesh, Object3D, Vector3 } from 'three';
-import { GroupProps } from '@react-three/fiber';
-declare type SamplePayload = {
-    position: Vector3;
-    normal: Vector3;
-    color: Color;
-};
-export declare type TransformFn = (payload: TransformPayload, i: number) => void;
-declare type TransformPayload = SamplePayload & {
-    dummy: Object3D;
-    sampledMesh: Mesh;
-};
-declare type Props = {
-    mesh?: React.RefObject<Mesh>;
-    instances?: React.RefObject<InstancedMesh>;
-    weight?: string;
-    transform?: TransformFn;
-    count?: number;
-};
-export interface useSurfaceSamplerProps {
-    transform?: TransformFn;
-    weight?: string;
-    count?: number;
-}
-export declare function useSurfaceSampler(mesh: React.MutableRefObject<Mesh>, count?: number, transform?: TransformFn, weight?: string, instanceMesh?: React.MutableRefObject<InstancedMesh> | null): InstancedBufferAttribute;
-export declare function Sampler({ children, weight, transform, instances, mesh, count, ...props }: React.PropsWithChildren<Props & GroupProps>): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/ScreenQuad.d.ts b/node_modules/@react-three/drei/core/ScreenQuad.d.ts
deleted file mode 100644
index 82ba6bd..0000000
--- a/node_modules/@react-three/drei/core/ScreenQuad.d.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-declare type Props = Omit<JSX.IntrinsicElements['mesh'], 'args'>;
-export declare const ScreenQuad: React.ForwardRefExoticComponent<Pick<Props, "visible" | "attach" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Segments.d.ts b/node_modules/@react-three/drei/core/Segments.d.ts
deleted file mode 100644
index 42763b3..0000000
--- a/node_modules/@react-three/drei/core/Segments.d.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { Line2 } from 'three-stdlib';
-declare type SegmentsProps = {
-    limit?: number;
-    lineWidth?: number;
-    children: React.ReactNode;
-};
-declare type SegmentProps = Omit<JSX.IntrinsicElements['segmentObject'], 'start' | 'end' | 'color'> & {
-    start: ReactThreeFiber.Vector3;
-    end: ReactThreeFiber.Vector3;
-    color?: ReactThreeFiber.Color;
-};
-declare const Segments: React.ForwardRefExoticComponent<SegmentsProps & React.RefAttributes<Line2>>;
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            segmentObject: ReactThreeFiber.Object3DNode<SegmentObject, typeof SegmentObject>;
-        }
-    }
-}
-export declare class SegmentObject {
-    color: THREE.Color;
-    start: THREE.Vector3;
-    end: THREE.Vector3;
-    constructor();
-}
-declare const Segment: React.ForwardRefExoticComponent<Pick<SegmentProps, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "end" | "start"> & React.RefAttributes<SegmentObject>>;
-export { Segments, Segment };
diff --git a/node_modules/@react-three/drei/core/Shadow.d.ts b/node_modules/@react-three/drei/core/Shadow.d.ts
deleted file mode 100644
index ad46a38..0000000
--- a/node_modules/@react-three/drei/core/Shadow.d.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import * as React from 'react';
-import { Mesh, Color } from 'three';
-export declare const Shadow: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>>, import("@react-three/fiber").NodeProps<Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>, typeof Mesh>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    colorStop?: number | undefined;
-    fog?: boolean | undefined;
-    color?: string | number | Color | undefined;
-    opacity?: number | undefined;
-    depthWrite?: boolean | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "fog" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "depthWrite" | "opacity" | "colorStop"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Sky.d.ts b/node_modules/@react-three/drei/core/Sky.d.ts
deleted file mode 100644
index 7e3c080..0000000
--- a/node_modules/@react-three/drei/core/Sky.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { Vector3 } from 'three';
-declare type Props = {
-    distance?: number;
-    sunPosition?: ReactThreeFiber.Vector3;
-    inclination?: number;
-    azimuth?: number;
-    mieCoefficient?: number;
-    mieDirectionalG?: number;
-    rayleigh?: number;
-    turbidity?: number;
-};
-export declare function calcPosFromAngles(inclination: number, azimuth: number, vector?: Vector3): Vector3;
-export declare const Sky: React.ForwardRefExoticComponent<Props & React.RefAttributes<unknown>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Sparkles.d.ts b/node_modules/@react-three/drei/core/Sparkles.d.ts
deleted file mode 100644
index c13df28..0000000
--- a/node_modules/@react-three/drei/core/Sparkles.d.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { Node } from '@react-three/fiber';
-interface Props {
-    count?: number;
-    speed?: number | Float32Array;
-    opacity?: number | Float32Array;
-    color?: THREE.ColorRepresentation | Float32Array;
-    size?: number | Float32Array;
-    scale?: number | [number, number, number] | THREE.Vector3;
-    noise?: number | [number, number, number] | THREE.Vector3 | Float32Array;
-}
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            sparklesMaterial: Node<any, any>;
-        }
-    }
-}
-export declare const Sparkles: React.ForwardRefExoticComponent<Pick<Props & Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<THREE.Points<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>, import("@react-three/fiber").NodeProps<THREE.Points<THREE.BufferGeometry, THREE.Material | THREE.Material[]>, typeof THREE.Points>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "isPoints" | keyof Props> & React.RefAttributes<THREE.Points<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/SpotLight.d.ts b/node_modules/@react-three/drei/core/SpotLight.d.ts
deleted file mode 100644
index 6ea728c..0000000
--- a/node_modules/@react-three/drei/core/SpotLight.d.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import * as React from 'react';
-import { DepthTexture, SpotLight as SpotLightImpl } from 'three';
-declare const SpotLight: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<SpotLightImpl>, import("@react-three/fiber").NodeProps<SpotLightImpl, typeof SpotLightImpl>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    depthBuffer?: DepthTexture | undefined;
-    attenuation?: number | undefined;
-    anglePower?: number | undefined;
-    radiusTop?: number | undefined;
-    radiusBottom?: number | undefined;
-    opacity?: number | undefined;
-    color?: string | number | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "intensity" | "isLight" | "shadow" | "shadowCameraFov" | "shadowCameraLeft" | "shadowCameraRight" | "shadowCameraTop" | "shadowCameraBottom" | "shadowCameraNear" | "shadowCameraFar" | "shadowBias" | "shadowMapWidth" | "shadowMapHeight" | "opacity" | "target" | "distance" | "angle" | "decay" | "power" | "penumbra" | "isSpotLight" | "depthBuffer" | "attenuation" | "anglePower" | "radiusTop" | "radiusBottom"> & React.RefAttributes<SpotLightImpl>>;
-export { SpotLight };
diff --git a/node_modules/@react-three/drei/core/Stage.d.ts b/node_modules/@react-three/drei/core/Stage.d.ts
deleted file mode 100644
index 5a873ce..0000000
--- a/node_modules/@react-three/drei/core/Stage.d.ts
+++ /dev/null
@@ -1,42 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { PresetsType } from '../helpers/environment-assets';
-declare const presets: {
-    rembrandt: {
-        main: number[];
-        fill: number[];
-    };
-    portrait: {
-        main: number[];
-        fill: number[];
-    };
-    upfront: {
-        main: number[];
-        fill: number[];
-    };
-    soft: {
-        main: number[];
-        fill: number[];
-    };
-};
-declare type ControlsProto = {
-    update(): void;
-    target: THREE.Vector3;
-};
-declare type Props = JSX.IntrinsicElements['group'] & {
-    shadows?: boolean;
-    adjustCamera?: boolean;
-    environment?: PresetsType | null;
-    intensity?: number;
-    ambience?: number;
-    controls?: React.MutableRefObject<ControlsProto>;
-    preset?: keyof typeof presets;
-    shadowBias?: number;
-    contactShadow?: {
-        blur: number;
-        opacity?: number;
-        position?: [x: number, y: number, z: number];
-    } | false;
-};
-export declare function Stage({ children, controls, shadows, adjustCamera, environment, intensity, preset, shadowBias, contactShadow, ...props }: Props): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/core/Stars.d.ts b/node_modules/@react-three/drei/core/Stars.d.ts
deleted file mode 100644
index 23580b2..0000000
--- a/node_modules/@react-three/drei/core/Stars.d.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-import { ShaderMaterial } from 'three';
-declare type Props = {
-    radius?: number;
-    depth?: number;
-    count?: number;
-    factor?: number;
-    saturation?: number;
-    fade?: boolean;
-    speed?: number;
-};
-declare class StarfieldMaterial extends ShaderMaterial {
-    constructor();
-}
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            starfieldMaterial: ReactThreeFiber.MaterialNode<StarfieldMaterial, []>;
-        }
-    }
-}
-export declare const Stars: React.ForwardRefExoticComponent<Props & React.RefAttributes<unknown>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/Stats.d.ts b/node_modules/@react-three/drei/core/Stats.d.ts
deleted file mode 100644
index df4bb53..0000000
--- a/node_modules/@react-three/drei/core/Stats.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import * as React from 'react';
-declare type Props = {
-    showPanel?: number;
-    className?: string;
-    parent?: React.RefObject<HTMLElement>;
-};
-export declare function Stats({ showPanel, className, parent }: Props): null;
-export {};
diff --git a/node_modules/@react-three/drei/core/Text.d.ts b/node_modules/@react-three/drei/core/Text.d.ts
deleted file mode 100644
index dd3ded3..0000000
--- a/node_modules/@react-three/drei/core/Text.d.ts
+++ /dev/null
@@ -1,50 +0,0 @@
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-export declare const Text: React.ForwardRefExoticComponent<Pick<Omit<ReactThreeFiber.ExtendedColors<ReactThreeFiber.Overwrite<Partial<import("three").Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>>, ReactThreeFiber.NodeProps<import("three").Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>, typeof import("three").Mesh>>>, ReactThreeFiber.NonFunctionKeys<{
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: ReactThreeFiber.Vector3 | undefined;
-    up?: ReactThreeFiber.Vector3 | undefined;
-    scale?: ReactThreeFiber.Vector3 | undefined;
-    rotation?: ReactThreeFiber.Euler | undefined;
-    matrix?: ReactThreeFiber.Matrix4 | undefined;
-    quaternion?: ReactThreeFiber.Quaternion | undefined;
-    layers?: ReactThreeFiber.Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    children: React.ReactNode;
-    characters?: string | undefined;
-    color?: ReactThreeFiber.Color | undefined;
-    fontSize?: number | undefined;
-    maxWidth?: number | undefined;
-    lineHeight?: number | undefined;
-    letterSpacing?: number | undefined;
-    textAlign?: "center" | "left" | "right" | "justify" | undefined;
-    font?: string | undefined;
-    anchorX?: number | "center" | "left" | "right" | undefined;
-    anchorY?: number | "bottom" | "top" | "middle" | "top-baseline" | "bottom-baseline" | undefined;
-    clipRect?: [number, number, number, number] | undefined;
-    depthOffset?: number | undefined;
-    direction?: "auto" | "ltr" | "rtl" | undefined;
-    overflowWrap?: "normal" | "break-word" | undefined;
-    whiteSpace?: "normal" | "overflowWrap" | undefined;
-    outlineWidth?: string | number | undefined;
-    outlineOffsetX?: string | number | undefined;
-    outlineOffsetY?: string | number | undefined;
-    outlineBlur?: string | number | undefined;
-    outlineColor?: ReactThreeFiber.Color | undefined;
-    outlineOpacity?: number | undefined;
-    strokeWidth?: string | number | undefined;
-    strokeColor?: ReactThreeFiber.Color | undefined;
-    strokeOpacity?: number | undefined;
-    fillOpacity?: number | undefined;
-    debugSDF?: boolean | undefined;
-    onSync?: ((troika: TextMeshImpl) => void) | undefined;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "color" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "font" | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "direction" | "fontSize" | "letterSpacing" | "lineHeight" | "maxWidth" | "outlineColor" | "outlineWidth" | "overflowWrap" | "textAlign" | "whiteSpace" | "fillOpacity" | "strokeOpacity" | "strokeWidth" | "anchorX" | "anchorY" | "characters" | "onSync" | "clipRect" | "depthOffset" | "outlineOffsetX" | "outlineOffsetY" | "outlineBlur" | "outlineOpacity" | "strokeColor" | "debugSDF"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/Text3D.d.ts b/node_modules/@react-three/drei/core/Text3D.d.ts
deleted file mode 100644
index acca5c9..0000000
--- a/node_modules/@react-three/drei/core/Text3D.d.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { Node } from '@react-three/fiber';
-import { TextGeometryParameters } from 'three-stdlib';
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            renamedTextGeometry: Node<any, any>;
-        }
-    }
-}
-declare type Glyph = {
-    _cachedOutline: string[];
-    ha: number;
-    o: string;
-};
-declare type FontData = {
-    boundingBox: {
-        yMax: number;
-        yMin: number;
-    };
-    familyName: string;
-    glyphs: {
-        [k: string]: Glyph;
-    };
-    resolution: number;
-    underlineThickness: number;
-};
-export declare const Text3D: React.ForwardRefExoticComponent<Pick<React.PropsWithChildren<{
-    font: FontData | string;
-    bevelSegments?: number | undefined;
-} & Omit<TextGeometryParameters, "font"> & Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>, import("@react-three/fiber").NodeProps<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>, typeof THREE.Mesh>>>, import("@react-three/fiber").NonFunctionKeys<{
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-}>> & {
-    position?: import("@react-three/fiber").Vector3 | undefined;
-    up?: import("@react-three/fiber").Vector3 | undefined;
-    scale?: import("@react-three/fiber").Vector3 | undefined;
-    rotation?: import("@react-three/fiber").Euler | undefined;
-    matrix?: import("@react-three/fiber").Matrix4 | undefined;
-    quaternion?: import("@react-three/fiber").Quaternion | undefined;
-    layers?: import("@react-three/fiber").Layers | undefined;
-    dispose?: (() => void) | null | undefined;
-} & import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers & {
-    letterSpacing?: number | undefined;
-    lineHeight?: number | undefined;
-}>, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "size" | "font" | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets" | "height" | "letterSpacing" | "lineHeight" | "bevelEnabled" | "bevelOffset" | "bevelSize" | "bevelThickness" | "curveSegments" | "bevelSegments"> & React.RefAttributes<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/TrackballControls.d.ts b/node_modules/@react-three/drei/core/TrackballControls.d.ts
deleted file mode 100644
index ef04b5d..0000000
--- a/node_modules/@react-three/drei/core/TrackballControls.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { TrackballControls as TrackballControlsImpl } from 'three-stdlib';
-export declare type TrackballControlsProps = ReactThreeFiber.Overwrite<ReactThreeFiber.Object3DNode<TrackballControlsImpl, typeof TrackballControlsImpl>, {
-    target?: ReactThreeFiber.Vector3;
-    camera?: THREE.Camera;
-    domElement?: HTMLElement;
-    regress?: boolean;
-    makeDefault?: boolean;
-    onChange?: (e?: THREE.Event) => void;
-    onStart?: (e?: THREE.Event) => void;
-    onEnd?: (e?: THREE.Event) => void;
-}>;
-export declare const TrackballControls: React.ForwardRefExoticComponent<Pick<TrackballControlsProps, "object" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onChange" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "camera" | "screen" | "reset" | "enabled" | "connect" | "update" | "target" | "onStart" | "keys" | "makeDefault" | "domElement" | "minDistance" | "maxDistance" | "zoomSpeed" | "rotateSpeed" | "panSpeed" | "mouseButtons" | "onEnd" | "regress" | "noRotate" | "noZoom" | "noPan" | "staticMoving" | "dynamicDampingFactor" | "cursorZoom" | "handleResize"> & React.RefAttributes<TrackballControlsImpl>>;
diff --git a/node_modules/@react-three/drei/core/Trail.d.ts b/node_modules/@react-three/drei/core/Trail.d.ts
deleted file mode 100644
index 207e028..0000000
--- a/node_modules/@react-three/drei/core/Trail.d.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import * as React from 'react';
-import { ColorRepresentation, Object3D } from 'three';
-import { MeshLine as MeshLineImpl } from 'meshline';
-declare type Settings = {
-    width: number;
-    length: number;
-    decay: number;
-    local: boolean;
-    stride: number;
-    interval: number;
-};
-export declare function useTrail(target: Object3D, settings: Partial<Settings>): React.MutableRefObject<Float32Array | undefined>;
-export declare type MeshLine = THREE.Mesh & MeshLineImpl;
-export declare const Trail: React.ForwardRefExoticComponent<{
-    color?: ColorRepresentation | undefined;
-    attenuation?: ((width: number) => number) | undefined;
-    target?: React.MutableRefObject<Object3D<import("three").Event>> | undefined;
-} & Partial<Settings> & {
-    children?: React.ReactNode;
-} & React.RefAttributes<MeshLine>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/TransformControls.d.ts b/node_modules/@react-three/drei/core/TransformControls.d.ts
deleted file mode 100644
index b7193bf..0000000
--- a/node_modules/@react-three/drei/core/TransformControls.d.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import { ReactThreeFiber } from '@react-three/fiber';
-import * as React from 'react';
-import * as THREE from 'three';
-import { TransformControls as TransformControlsImpl } from 'three-stdlib';
-export declare type TransformControlsProps = ReactThreeFiber.Object3DNode<TransformControlsImpl, typeof TransformControlsImpl> & JSX.IntrinsicElements['group'] & {
-    object?: THREE.Object3D | React.MutableRefObject<THREE.Object3D>;
-    enabled?: boolean;
-    axis?: string | null;
-    domElement?: HTMLElement;
-    mode?: string;
-    translationSnap?: number | null;
-    rotationSnap?: number | null;
-    scaleSnap?: number | null;
-    space?: string;
-    size?: number;
-    showX?: boolean;
-    showY?: boolean;
-    showZ?: boolean;
-    children?: React.ReactElement<THREE.Object3D>;
-    camera?: THREE.Camera;
-    onChange?: (e?: THREE.Event) => void;
-    onMouseDown?: (e?: THREE.Event) => void;
-    onMouseUp?: (e?: THREE.Event) => void;
-    onObjectChange?: (e?: THREE.Event) => void;
-};
-export declare const TransformControls: React.ForwardRefExoticComponent<Pick<TransformControlsProps, "object" | "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onChange" | "onMouseDown" | "onMouseUp" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "camera" | "size" | "space" | "reset" | "enabled" | "connect" | "update" | "setSize" | "axis" | "domElement" | "isTransformControls" | "detach" | "getMode" | "setMode" | "setTranslationSnap" | "setRotationSnap" | "setScaleSnap" | "setSpace" | "onObjectChange" | "mode" | "translationSnap" | "rotationSnap" | "scaleSnap" | "showX" | "showY" | "showZ"> & React.RefAttributes<TransformControlsImpl<THREE.Camera>>>;
diff --git a/node_modules/@react-three/drei/core/index.d.ts b/node_modules/@react-three/drei/core/index.d.ts
deleted file mode 100644
index 0bcabb4..0000000
--- a/node_modules/@react-three/drei/core/index.d.ts
+++ /dev/null
@@ -1,94 +0,0 @@
-export * from './Billboard';
-export * from './QuadraticBezierLine';
-export * from './CubicBezierLine';
-export * from './CatmullRomLine';
-export * from './Line';
-export * from './PositionalAudio';
-export * from './Text';
-export * from './Text3D';
-export * from './Effects';
-export * from './GradientTexture';
-export * from './Image';
-export * from './Edges';
-export * from './Trail';
-export * from './Sampler';
-export * from './ComputedAttribute';
-export * from './Clone';
-export * from './MarchingCubes';
-export * from './Decal';
-export * from './OrthographicCamera';
-export * from './PerspectiveCamera';
-export * from './CubeCamera';
-export * from './DeviceOrientationControls';
-export * from './FlyControls';
-export * from './MapControls';
-export * from './OrbitControls';
-export * from './TrackballControls';
-export * from './ArcballControls';
-export * from './TransformControls';
-export * from './PointerLockControls';
-export * from './FirstPersonControls';
-export * from './pivotControls';
-export * from './GizmoHelper';
-export * from './GizmoViewcube';
-export * from './GizmoViewport';
-export * from './useCubeTexture';
-export * from './useFBX';
-export * from './useGLTF';
-export * from './useProgress';
-export * from './useTexture';
-export * from './useKTX2';
-export * from './Stats';
-export * from './useDepthBuffer';
-export * from './useAspect';
-export * from './useCamera';
-export * from './useDetectGPU';
-export * from './useHelper';
-export * from './useBVH';
-export * from './useContextBridge';
-export * from './useAnimations';
-export * from './useFBO';
-export * from './useIntersect';
-export * from './useBoxProjectedEnv';
-export * from './BBAnchor';
-export * from './CurveModifier';
-export * from './MeshDistortMaterial';
-export * from './MeshWobbleMaterial';
-export * from './MeshReflectorMaterial';
-export * from './PointMaterial';
-export * from './shaderMaterial';
-export * from './softShadows';
-export * from './shapes';
-export * from './RoundedBox';
-export * from './ScreenQuad';
-export * from './Center';
-export * from './Bounds';
-export * from './CameraShake';
-export * from './Float';
-export * from './Stage';
-export * from './Backdrop';
-export * from './Shadow';
-export * from './ContactShadows';
-export * from './AccumulativeShadows';
-export * from './Reflector';
-export * from './SpotLight';
-export * from './Environment';
-export * from './Lightformer';
-export * from './Sky';
-export * from './Stars';
-export * from './Cloud';
-export * from './Sparkles';
-export * from './useMatcapTexture';
-export * from './useNormalTexture';
-export * from './Points';
-export * from './Instances';
-export * from './Segments';
-export * from './Detailed';
-export * from './Preload';
-export * from './BakeShadows';
-export * from './meshBounds';
-export * from './AdaptiveDpr';
-export * from './AdaptiveEvents';
-export * from './PerformanceMonitor';
-export * from './RenderTexture';
-export * from './Mask';
diff --git a/node_modules/@react-three/drei/core/meshBounds.d.ts b/node_modules/@react-three/drei/core/meshBounds.d.ts
deleted file mode 100644
index 7c2c490..0000000
--- a/node_modules/@react-three/drei/core/meshBounds.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { Raycaster, Intersection } from 'three';
-export declare function meshBounds(raycaster: Raycaster, intersects: Intersection[]): void;
diff --git a/node_modules/@react-three/drei/core/pivotControls/AxisArrow.d.ts b/node_modules/@react-three/drei/core/pivotControls/AxisArrow.d.ts
deleted file mode 100644
index cffb323..0000000
--- a/node_modules/@react-three/drei/core/pivotControls/AxisArrow.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-export declare const calculateOffset: (clickPoint: THREE.Vector3, normal: THREE.Vector3, rayStart: THREE.Vector3, rayDir: THREE.Vector3) => number;
-export declare const AxisArrow: React.FC<{
-    direction: THREE.Vector3;
-    axis: 0 | 1 | 2;
-}>;
diff --git a/node_modules/@react-three/drei/core/pivotControls/AxisRotator.d.ts b/node_modules/@react-three/drei/core/pivotControls/AxisRotator.d.ts
deleted file mode 100644
index fea6a6b..0000000
--- a/node_modules/@react-three/drei/core/pivotControls/AxisRotator.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-export declare const AxisRotator: React.FC<{
-    dir1: THREE.Vector3;
-    dir2: THREE.Vector3;
-    axis: 0 | 1 | 2;
-}>;
diff --git a/node_modules/@react-three/drei/core/pivotControls/PlaneSlider.d.ts b/node_modules/@react-three/drei/core/pivotControls/PlaneSlider.d.ts
deleted file mode 100644
index 086d970..0000000
--- a/node_modules/@react-three/drei/core/pivotControls/PlaneSlider.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-export declare const PlaneSlider: React.FC<{
-    dir1: THREE.Vector3;
-    dir2: THREE.Vector3;
-    axis: 0 | 1 | 2;
-}>;
diff --git a/node_modules/@react-three/drei/core/pivotControls/context.d.ts b/node_modules/@react-three/drei/core/pivotControls/context.d.ts
deleted file mode 100644
index 961b530..0000000
--- a/node_modules/@react-three/drei/core/pivotControls/context.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-export declare type PivotContext = {
-    onDragStart: () => void;
-    onDrag: (mdW: THREE.Matrix4) => void;
-    onDragEnd: () => void;
-    axisColors: [string | number, string | number, string | number];
-    hoveredColor: string | number;
-    opacity: number;
-    scale: number;
-    lineWidth: number;
-    fixed: boolean;
-    depthTest: boolean;
-    userData?: {
-        [key: string]: any;
-    };
-    annotationsClass?: string;
-};
-export declare const context: React.Context<PivotContext>;
diff --git a/node_modules/@react-three/drei/core/pivotControls/index.d.ts b/node_modules/@react-three/drei/core/pivotControls/index.d.ts
deleted file mode 100644
index 5c3f83c..0000000
--- a/node_modules/@react-three/drei/core/pivotControls/index.d.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { Size } from '@react-three/fiber';
-export declare const calculateScaleFactor: (point3: THREE.Vector3, radiusPx: number, camera: THREE.Camera, size: Size) => number;
-declare type PivotControlsProps = {
-    scale?: number;
-    lineWidth?: number;
-    fixed?: boolean;
-    offset?: [number, number, number];
-    rotation?: [number, number, number];
-    matrix?: THREE.Matrix4;
-    anchor?: [number, number, number];
-    autoTransform?: boolean;
-    activeAxes?: [boolean, boolean, boolean];
-    axisColors?: [string | number, string | number, string | number];
-    hoveredColor?: string | number;
-    annotationsClass?: string;
-    onDragStart?: () => void;
-    onDrag?: (l: THREE.Matrix4, deltaL: THREE.Matrix4, w: THREE.Matrix4, deltaW: THREE.Matrix4) => void;
-    onDragEnd?: () => void;
-    depthTest?: boolean;
-    opacity?: number;
-    visible?: boolean;
-    userData?: {
-        [key: string]: any;
-    };
-    children?: React.ReactNode;
-};
-export declare const PivotControls: React.ForwardRefExoticComponent<PivotControlsProps & React.RefAttributes<THREE.Group>>;
-export {};
diff --git a/node_modules/@react-three/drei/core/shaderMaterial.d.ts b/node_modules/@react-three/drei/core/shaderMaterial.d.ts
deleted file mode 100644
index 65b4d11..0000000
--- a/node_modules/@react-three/drei/core/shaderMaterial.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import * as THREE from 'three';
-export declare function shaderMaterial(uniforms: {
-    [name: string]: THREE.CubeTexture | THREE.Texture | Int32Array | Float32Array | THREE.Matrix4 | THREE.Matrix3 | THREE.Quaternion | THREE.Vector4 | THREE.Vector3 | THREE.Vector2 | THREE.Color | number | boolean | Array<any> | null;
-}, vertexShader: string, fragmentShader: string, onInit?: (material?: THREE.ShaderMaterial) => void): typeof THREE.ShaderMaterial & {
-    key: string;
-};
diff --git a/node_modules/@react-three/drei/core/shapes.d.ts b/node_modules/@react-three/drei/core/shapes.d.ts
deleted file mode 100644
index 7847ddb..0000000
--- a/node_modules/@react-three/drei/core/shapes.d.ts
+++ /dev/null
@@ -1,78 +0,0 @@
-import * as React from 'react';
-export declare type Args<T> = T extends new (...args: any) => any ? ConstructorParameters<T> : T;
-export declare type ShapeProps<T> = Omit<JSX.IntrinsicElements['mesh'], 'args'> & {
-    args?: Args<T>;
-    children?: React.ReactNode;
-};
-export declare const Box: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [width?: number | undefined, height?: number | undefined, depth?: number | undefined, widthSegments?: number | undefined, heightSegments?: number | undefined, depthSegments?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Circle: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, segments?: number | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Cone: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, height?: number | undefined, radialSegments?: number | undefined, heightSegments?: number | undefined, openEnded?: boolean | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Cylinder: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radiusTop?: number | undefined, radiusBottom?: number | undefined, height?: number | undefined, radialSegments?: number | undefined, heightSegments?: number | undefined, openEnded?: boolean | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Sphere: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, widthSegments?: number | undefined, heightSegments?: number | undefined, phiStart?: number | undefined, phiLength?: number | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Plane: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [width?: number | undefined, height?: number | undefined, widthSegments?: number | undefined, heightSegments?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Tube: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [path?: import("three").Curve<import("three").Vector3> | undefined, tubularSegments?: number | undefined, radius?: number | undefined, radiusSegments?: number | undefined, closed?: boolean | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Torus: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, tube?: number | undefined, radialSegments?: number | undefined, tubularSegments?: number | undefined, arc?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const TorusKnot: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, tube?: number | undefined, tubularSegments?: number | undefined, radialSegments?: number | undefined, p?: number | undefined, q?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Tetrahedron: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, detail?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Ring: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [innerRadius?: number | undefined, outerRadius?: number | undefined, thetaSegments?: number | undefined, phiSegments?: number | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Polyhedron: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [vertices?: number[] | undefined, indices?: number[] | undefined, radius?: number | undefined, detail?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Icosahedron: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, detail?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Octahedron: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, detail?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Dodecahedron: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, detail?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Extrude: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [shapes?: import("three").Shape | import("three").Shape[] | undefined, options?: import("three").ExtrudeGeometryOptions | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Lathe: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [points?: import("three").Vector2[] | undefined, segments?: number | undefined, phiStart?: number | undefined, phiLength?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
-export declare const Capsule: React.ForwardRefExoticComponent<Pick<Omit<import("@react-three/fiber").MeshProps, "args"> & {
-    args?: [radius?: number | undefined, length?: number | undefined, capSegments?: number | undefined, radialSegments?: number | undefined] | undefined;
-    children?: React.ReactNode;
-}, "visible" | "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "material" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "updateMorphTargets"> & React.RefAttributes<unknown>>;
diff --git a/node_modules/@react-three/drei/core/softShadows.d.ts b/node_modules/@react-three/drei/core/softShadows.d.ts
deleted file mode 100644
index 86ee9fa..0000000
--- a/node_modules/@react-three/drei/core/softShadows.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-declare type Props = {
-    frustum?: number;
-    size?: number;
-    near?: number;
-    samples?: number;
-    rings?: number;
-};
-export declare const softShadows: (props?: Props) => void;
-export {};
diff --git a/node_modules/@react-three/drei/core/useAnimations.d.ts b/node_modules/@react-three/drei/core/useAnimations.d.ts
deleted file mode 100644
index 409df19..0000000
--- a/node_modules/@react-three/drei/core/useAnimations.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import * as React from 'react';
-import { Object3D, AnimationClip, AnimationAction, AnimationMixer } from 'three';
-declare type Api<T extends AnimationClip> = {
-    ref: React.MutableRefObject<Object3D | undefined | null>;
-    clips: AnimationClip[];
-    mixer: AnimationMixer;
-    names: T['name'][];
-    actions: {
-        [key in T['name']]: AnimationAction | null;
-    };
-};
-export declare function useAnimations<T extends AnimationClip>(clips: T[], root?: React.MutableRefObject<Object3D | undefined | null> | Object3D): Api<T>;
-export {};
diff --git a/node_modules/@react-three/drei/core/useAspect.d.ts b/node_modules/@react-three/drei/core/useAspect.d.ts
deleted file mode 100644
index 5202f0e..0000000
--- a/node_modules/@react-three/drei/core/useAspect.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare function useAspect(width: number, height: number, factor?: number): [number, number, number];
diff --git a/node_modules/@react-three/drei/core/useBVH.d.ts b/node_modules/@react-three/drei/core/useBVH.d.ts
deleted file mode 100644
index 81b0b16..0000000
--- a/node_modules/@react-three/drei/core/useBVH.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import * as React from 'react';
-import { Mesh } from 'three';
-export interface BVHOptions {
-    splitStrategy?: 'CENTER' | 'AVERAGE' | 'SAH';
-    verbose?: boolean;
-    setBoundingBox?: boolean;
-    maxDepth?: number;
-    maxLeafTris?: number;
-}
-export declare function useBVH(mesh: React.MutableRefObject<Mesh | undefined>, options?: BVHOptions): void;
diff --git a/node_modules/@react-three/drei/core/useBoxProjectedEnv.d.ts b/node_modules/@react-three/drei/core/useBoxProjectedEnv.d.ts
deleted file mode 100644
index a3ef17c..0000000
--- a/node_modules/@react-three/drei/core/useBoxProjectedEnv.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import * as THREE from 'three';
-import * as React from 'react';
-import { ReactThreeFiber } from '@react-three/fiber';
-export declare function useBoxProjectedEnv(position?: ReactThreeFiber.Vector3, size?: ReactThreeFiber.Vector3): {
-    ref: React.MutableRefObject<THREE.Material>;
-    onBeforeCompile: (shader: THREE.Shader) => void;
-    customProgramCacheKey: () => string;
-};
diff --git a/node_modules/@react-three/drei/core/useCamera.d.ts b/node_modules/@react-three/drei/core/useCamera.d.ts
deleted file mode 100644
index 2bf959b..0000000
--- a/node_modules/@react-three/drei/core/useCamera.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-import * as React from 'react';
-import { Raycaster, Camera, Intersection } from 'three';
-export declare function useCamera(camera: Camera | React.MutableRefObject<Camera>, props?: Partial<Raycaster>): (_: Raycaster, intersects: Intersection[]) => void;
diff --git a/node_modules/@react-three/drei/core/useContextBridge.d.ts b/node_modules/@react-three/drei/core/useContextBridge.d.ts
deleted file mode 100644
index ef9ad1f..0000000
--- a/node_modules/@react-three/drei/core/useContextBridge.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import * as React from 'react';
-export declare function useContextBridge(...contexts: Array<React.Context<any>>): ({ children }: {
-    children: React.ReactNode;
-}) => JSX.Element;
diff --git a/node_modules/@react-three/drei/core/useCubeTexture.d.ts b/node_modules/@react-three/drei/core/useCubeTexture.d.ts
deleted file mode 100644
index 15d1e3a..0000000
--- a/node_modules/@react-three/drei/core/useCubeTexture.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { CubeTexture } from 'three';
-declare type Options = {
-    path: string;
-};
-export declare function useCubeTexture(files: string[], { path }: Options): CubeTexture;
-export declare namespace useCubeTexture {
-    var preload: (files: string[], { path }: Options) => undefined;
-}
-export {};
diff --git a/node_modules/@react-three/drei/core/useDepthBuffer.d.ts b/node_modules/@react-three/drei/core/useDepthBuffer.d.ts
deleted file mode 100644
index 7249e75..0000000
--- a/node_modules/@react-three/drei/core/useDepthBuffer.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import { DepthTexture } from 'three';
-declare function useDepthBuffer({ size, frames }?: {
-    size?: number;
-    frames?: number;
-}): DepthTexture;
-export { useDepthBuffer };
diff --git a/node_modules/@react-three/drei/core/useDetectGPU.d.ts b/node_modules/@react-three/drei/core/useDetectGPU.d.ts
deleted file mode 100644
index 4192a87..0000000
--- a/node_modules/@react-three/drei/core/useDetectGPU.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { GetGPUTier, TierResult } from 'detect-gpu';
-export declare const useDetectGPU: (props?: GetGPUTier) => TierResult;
diff --git a/node_modules/@react-three/drei/core/useFBO.d.ts b/node_modules/@react-three/drei/core/useFBO.d.ts
deleted file mode 100644
index 853e7a9..0000000
--- a/node_modules/@react-three/drei/core/useFBO.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import * as THREE from 'three';
-declare type FBOSettings<T extends boolean = false> = {
-    multisample?: T;
-    samples?: number;
-} & THREE.WebGLRenderTargetOptions;
-export declare function useFBO<T extends boolean = false>(width?: number | FBOSettings<T>, height?: number, settings?: FBOSettings<T>): THREE.WebGLRenderTarget;
-export {};
diff --git a/node_modules/@react-three/drei/core/useFBX.d.ts b/node_modules/@react-three/drei/core/useFBX.d.ts
deleted file mode 100644
index 0beb9b9..0000000
--- a/node_modules/@react-three/drei/core/useFBX.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import { Group } from 'three';
-export declare function useFBX(path: string): Group;
-export declare namespace useFBX {
-    var preload: (path: string) => undefined;
-    var clear: (input: string | string[]) => void;
-}
diff --git a/node_modules/@react-three/drei/core/useGLTF.d.ts b/node_modules/@react-three/drei/core/useGLTF.d.ts
deleted file mode 100644
index 6f27fbf..0000000
--- a/node_modules/@react-three/drei/core/useGLTF.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import { GLTFLoader, GLTF } from 'three-stdlib';
-export declare function useGLTF<T extends string | string[]>(path: T, useDraco?: boolean | string, useMeshOpt?: boolean, extendLoader?: (loader: GLTFLoader) => void): T extends any[] ? GLTF[] : GLTF;
-export declare namespace useGLTF {
-    var preload: (path: string | string[], useDraco?: string | boolean, useMeshOpt?: boolean, extendLoader?: ((loader: GLTFLoader) => void) | undefined) => undefined;
-    var clear: (input: string | string[]) => void;
-}
diff --git a/node_modules/@react-three/drei/core/useHelper.d.ts b/node_modules/@react-three/drei/core/useHelper.d.ts
deleted file mode 100644
index a124294..0000000
--- a/node_modules/@react-three/drei/core/useHelper.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import * as React from 'react';
-import { Object3D } from 'three';
-import { Falsey } from 'utility-types';
-declare type Helper = Object3D & {
-    update: () => void;
-};
-declare type Constructor = new (...args: any[]) => any;
-declare type Rest<T> = T extends [infer _, ...infer R] ? R : never;
-export declare function useHelper<T extends Constructor>(object3D: React.MutableRefObject<Object3D | null | undefined> | Falsey | undefined, helperConstructor: T, ...args: Rest<ConstructorParameters<T>>): React.MutableRefObject<Helper | undefined>;
-export {};
diff --git a/node_modules/@react-three/drei/core/useIntersect.d.ts b/node_modules/@react-three/drei/core/useIntersect.d.ts
deleted file mode 100644
index 4b99631..0000000
--- a/node_modules/@react-three/drei/core/useIntersect.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import * as React from 'react';
-export declare function useIntersect<T extends THREE.Object3D>(onChange: (visible: boolean) => void): React.MutableRefObject<T>;
diff --git a/node_modules/@react-three/drei/core/useKTX2.d.ts b/node_modules/@react-three/drei/core/useKTX2.d.ts
deleted file mode 100644
index 8ea4a99..0000000
--- a/node_modules/@react-three/drei/core/useKTX2.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { Texture } from 'three';
-export declare function useKTX2<Url extends string[] | string | Record<string, string>>(input: Url, basisPath?: string): Url extends any[] ? Texture[] : Url extends object ? {
-    [key in keyof Url]: Texture;
-} : Texture;
-export declare namespace useKTX2 {
-    var preload: (url: string, basisPath?: string) => undefined;
-    var clear: (input: string | string[]) => void;
-}
diff --git a/node_modules/@react-three/drei/core/useMatcapTexture.d.ts b/node_modules/@react-three/drei/core/useMatcapTexture.d.ts
deleted file mode 100644
index 04ff4c8..0000000
--- a/node_modules/@react-three/drei/core/useMatcapTexture.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { Texture } from 'three';
-export declare function useMatcapTexture(id?: number | string, format?: number, onLoad?: (texture: Texture | Texture[]) => void): [THREE.Texture, string, number];
diff --git a/node_modules/@react-three/drei/core/useNormalTexture.d.ts b/node_modules/@react-three/drei/core/useNormalTexture.d.ts
deleted file mode 100644
index d87c0f5..0000000
--- a/node_modules/@react-three/drei/core/useNormalTexture.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { Texture } from 'three';
-declare type Settings = {
-    repeat?: number[];
-    anisotropy?: number;
-    offset?: number[];
-};
-export declare function useNormalTexture(id?: number, settings?: Settings, onLoad?: (texture: Texture | Texture[]) => void): [Texture, string, number];
-export {};
diff --git a/node_modules/@react-three/drei/core/useProgress.d.ts b/node_modules/@react-three/drei/core/useProgress.d.ts
deleted file mode 100644
index 38c0887..0000000
--- a/node_modules/@react-three/drei/core/useProgress.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-declare type Data = {
-    errors: string[];
-    active: boolean;
-    progress: number;
-    item: string;
-    loaded: number;
-    total: number;
-};
-declare const useProgress: import("zustand").UseBoundStore<Data, import("zustand").StoreApi<Data>>;
-export { useProgress };
diff --git a/node_modules/@react-three/drei/core/useTexture.d.ts b/node_modules/@react-three/drei/core/useTexture.d.ts
deleted file mode 100644
index df3f7c4..0000000
--- a/node_modules/@react-three/drei/core/useTexture.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { Texture } from 'three';
-export declare const IsObject: (url: any) => url is Record<string, string>;
-export declare function useTexture<Url extends string[] | string | Record<string, string>>(input: Url, onLoad?: (texture: Texture | Texture[]) => void): Url extends any[] ? Texture[] : Url extends object ? {
-    [key in keyof Url]: Texture;
-} : Texture;
-export declare namespace useTexture {
-    var preload: (url: string) => undefined;
-    var clear: (input: string | string[]) => void;
-}
diff --git a/node_modules/@react-three/drei/helpers/Position.d.ts b/node_modules/@react-three/drei/helpers/Position.d.ts
deleted file mode 100644
index 53d87b5..0000000
--- a/node_modules/@react-three/drei/helpers/Position.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/// <reference types="react" />
-import * as THREE from 'three';
-import { ReactThreeFiber } from '@react-three/fiber';
-declare global {
-    namespace JSX {
-        interface IntrinsicElements {
-            position: ReactThreeFiber.Object3DNode<Position, typeof Position>;
-        }
-    }
-}
-export declare class Position extends THREE.Group {
-    color: THREE.Color;
-    instance: React.MutableRefObject<THREE.InstancedMesh | undefined>;
-    instanceKey: React.MutableRefObject<JSX.IntrinsicElements['position'] | undefined>;
-    constructor();
-    get geometry(): THREE.BufferGeometry | undefined;
-    raycast(raycaster: any, intersects: any): void;
-}
diff --git a/node_modules/@react-three/drei/helpers/environment-assets.d.ts b/node_modules/@react-three/drei/helpers/environment-assets.d.ts
deleted file mode 100644
index c888ebe..0000000
--- a/node_modules/@react-three/drei/helpers/environment-assets.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-export declare const presetsObj: {
-    sunset: string;
-    dawn: string;
-    night: string;
-    warehouse: string;
-    forest: string;
-    apartment: string;
-    studio: string;
-    city: string;
-    park: string;
-    lobby: string;
-};
-export declare type PresetsType = keyof typeof presetsObj;
diff --git a/node_modules/@react-three/drei/helpers/ts-utils.d.ts b/node_modules/@react-three/drei/helpers/ts-utils.d.ts
deleted file mode 100644
index 5cf0c48..0000000
--- a/node_modules/@react-three/drei/helpers/ts-utils.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare type NamedArrayTuple<T extends (...args: any) => any> = Parameters<T>;
diff --git a/node_modules/@react-three/drei/helpers/useEffectfulState.d.ts b/node_modules/@react-three/drei/helpers/useEffectfulState.d.ts
deleted file mode 100644
index 6a68c1b..0000000
--- a/node_modules/@react-three/drei/helpers/useEffectfulState.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import * as React from 'react';
-declare type RefType<T> = React.MutableRefObject<T> | ((state: T) => void);
-export declare function useEffectfulState<T>(fn: () => T, deps?: React.DependencyList, cb?: RefType<T>): T | undefined;
-export {};
diff --git a/node_modules/@react-three/drei/index.d.ts b/node_modules/@react-three/drei/index.d.ts
deleted file mode 100644
index b80c83a..0000000
--- a/node_modules/@react-three/drei/index.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './web';
diff --git a/node_modules/@react-three/drei/materials/BlurPass.d.ts b/node_modules/@react-three/drei/materials/BlurPass.d.ts
deleted file mode 100644
index b604426..0000000
--- a/node_modules/@react-three/drei/materials/BlurPass.d.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import { Mesh, Scene, WebGLRenderTarget, WebGLRenderer, Camera } from 'three';
-import { ConvolutionMaterial } from './ConvolutionMaterial';
-export interface BlurPassProps {
-    gl: WebGLRenderer;
-    resolution: number;
-    width?: number;
-    height?: number;
-    minDepthThreshold?: number;
-    maxDepthThreshold?: number;
-    depthScale?: number;
-    depthToBlurRatioBias?: number;
-}
-export declare class BlurPass {
-    readonly renderTargetA: WebGLRenderTarget;
-    readonly renderTargetB: WebGLRenderTarget;
-    readonly convolutionMaterial: ConvolutionMaterial;
-    readonly scene: Scene;
-    readonly camera: Camera;
-    readonly screen: Mesh;
-    renderToScreen: boolean;
-    constructor({ gl, resolution, width, height, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, }: BlurPassProps);
-    render(renderer: any, inputBuffer: any, outputBuffer: any): void;
-}
diff --git a/node_modules/@react-three/drei/materials/ConvolutionMaterial.d.ts b/node_modules/@react-three/drei/materials/ConvolutionMaterial.d.ts
deleted file mode 100644
index b5d443f..0000000
--- a/node_modules/@react-three/drei/materials/ConvolutionMaterial.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import { ShaderMaterial, Vector2 } from 'three';
-export declare class ConvolutionMaterial extends ShaderMaterial {
-    readonly kernel: Float32Array;
-    constructor(texelSize?: Vector2);
-    setTexelSize(x: number, y: number): void;
-    setResolution(resolution: Vector2): void;
-}
diff --git a/node_modules/@react-three/drei/materials/MeshReflectorMaterial.d.ts b/node_modules/@react-three/drei/materials/MeshReflectorMaterial.d.ts
deleted file mode 100644
index 83afc9b..0000000
--- a/node_modules/@react-three/drei/materials/MeshReflectorMaterial.d.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-import { Matrix4, MeshStandardMaterial, Texture } from 'three';
-export declare class MeshReflectorMaterial extends MeshStandardMaterial {
-    private _tDepth;
-    private _distortionMap;
-    private _tDiffuse;
-    private _tDiffuseBlur;
-    private _textureMatrix;
-    private _hasBlur;
-    private _mirror;
-    private _mixBlur;
-    private _blurStrength;
-    private _minDepthThreshold;
-    private _maxDepthThreshold;
-    private _depthScale;
-    private _depthToBlurRatioBias;
-    private _distortion;
-    private _mixContrast;
-    constructor(parameters?: {});
-    onBeforeCompile(shader: any): void;
-    get tDiffuse(): Texture | null;
-    set tDiffuse(v: Texture | null);
-    get tDepth(): Texture | null;
-    set tDepth(v: Texture | null);
-    get distortionMap(): Texture | null;
-    set distortionMap(v: Texture | null);
-    get tDiffuseBlur(): Texture | null;
-    set tDiffuseBlur(v: Texture | null);
-    get textureMatrix(): Matrix4 | null;
-    set textureMatrix(v: Matrix4 | null);
-    get hasBlur(): boolean;
-    set hasBlur(v: boolean);
-    get mirror(): number;
-    set mirror(v: number);
-    get mixBlur(): number;
-    set mixBlur(v: number);
-    get mixStrength(): number;
-    set mixStrength(v: number);
-    get minDepthThreshold(): number;
-    set minDepthThreshold(v: number);
-    get maxDepthThreshold(): number;
-    set maxDepthThreshold(v: number);
-    get depthScale(): number;
-    set depthScale(v: number);
-    get depthToBlurRatioBias(): number;
-    set depthToBlurRatioBias(v: number);
-    get distortion(): number;
-    set distortion(v: number);
-    get mixContrast(): number;
-    set mixContrast(v: number);
-}
-export declare type MeshReflectorMaterialProps = {
-    mixBlur: number;
-    mixStrength: number;
-    mirror: number;
-    textureMatrix: Matrix4;
-    tDiffuse: Texture;
-    distortionMap?: Texture;
-    tDiffuseBlur: Texture;
-    hasBlur: boolean;
-    minDepthThreshold: number;
-    maxDepthThreshold: number;
-    depthScale: number;
-    depthToBlurRatioBias: number;
-    distortion: number;
-    mixContrast: number;
-} & JSX.IntrinsicElements['meshStandardMaterial'];
diff --git a/node_modules/@react-three/drei/materials/SpotLightMaterial.d.ts b/node_modules/@react-three/drei/materials/SpotLightMaterial.d.ts
deleted file mode 100644
index 687fd4d..0000000
--- a/node_modules/@react-three/drei/materials/SpotLightMaterial.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import { ShaderMaterial } from 'three';
-export declare class SpotLightMaterial extends ShaderMaterial {
-    constructor();
-}
diff --git a/node_modules/@react-three/drei/native/index.d.ts b/node_modules/@react-three/drei/native/index.d.ts
deleted file mode 100644
index 60507ba..0000000
--- a/node_modules/@react-three/drei/native/index.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from '../core';
diff --git a/node_modules/@react-three/drei/web/CycleRaycast.d.ts b/node_modules/@react-three/drei/web/CycleRaycast.d.ts
deleted file mode 100644
index a3a3877..0000000
--- a/node_modules/@react-three/drei/web/CycleRaycast.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-export declare type CycleRaycastProps = {
-    onChanged?: (hits: THREE.Intersection[], cycle: number) => null;
-    preventDefault?: boolean;
-    scroll?: boolean;
-    keyCode?: number;
-    portal?: React.MutableRefObject<HTMLElement>;
-};
-export declare function CycleRaycast({ onChanged, portal, preventDefault, scroll, keyCode, }: CycleRaycastProps): null;
diff --git a/node_modules/@react-three/drei/web/Html.d.ts b/node_modules/@react-three/drei/web/Html.d.ts
deleted file mode 100644
index 8574a5a..0000000
--- a/node_modules/@react-three/drei/web/Html.d.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import * as React from 'react';
-import { Group, Object3D, Camera } from 'three';
-import { Assign } from 'utility-types';
-import { ReactThreeFiber } from '@react-three/fiber';
-declare function defaultCalculatePosition(el: Object3D, camera: Camera, size: {
-    width: number;
-    height: number;
-}): number[];
-export declare type CalculatePosition = typeof defaultCalculatePosition;
-declare type PointerEventsProperties = 'auto' | 'none' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'inherit';
-export interface HtmlProps extends Omit<Assign<React.HTMLAttributes<HTMLDivElement>, ReactThreeFiber.Object3DNode<Group, typeof Group>>, 'ref'> {
-    prepend?: boolean;
-    center?: boolean;
-    fullscreen?: boolean;
-    eps?: number;
-    portal?: React.MutableRefObject<HTMLElement>;
-    distanceFactor?: number;
-    sprite?: boolean;
-    transform?: boolean;
-    zIndexRange?: Array<number>;
-    occlude?: React.RefObject<Object3D>[] | boolean;
-    onOcclude?: (visible: boolean) => null;
-    calculatePosition?: CalculatePosition;
-    as?: string;
-    wrapperClass?: string;
-    pointerEvents?: PointerEventsProperties;
-}
-export declare const Html: React.ForwardRefExoticComponent<HtmlProps & React.RefAttributes<HTMLDivElement>>;
-export {};
diff --git a/node_modules/@react-three/drei/web/Loader.d.ts b/node_modules/@react-three/drei/web/Loader.d.ts
deleted file mode 100644
index bde63ea..0000000
--- a/node_modules/@react-three/drei/web/Loader.d.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-/// <reference types="react" />
-interface LoaderOptions {
-    containerStyles: any;
-    innerStyles: any;
-    barStyles: any;
-    dataStyles: any;
-    dataInterpolation: (p: number) => string;
-    initialState: (active: boolean) => boolean;
-}
-export declare function Loader({ containerStyles, innerStyles, barStyles, dataStyles, dataInterpolation, initialState, }: Partial<LoaderOptions>): JSX.Element | null;
-export {};
diff --git a/node_modules/@react-three/drei/web/PresentationControls.d.ts b/node_modules/@react-three/drei/web/PresentationControls.d.ts
deleted file mode 100644
index de1452e..0000000
--- a/node_modules/@react-three/drei/web/PresentationControls.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import * as React from 'react';
-import { SpringConfig } from '@react-spring/core';
-declare type Props = {
-    snap?: Boolean | SpringConfig;
-    global?: boolean;
-    cursor?: boolean;
-    speed?: number;
-    zoom?: number;
-    rotation?: [number, number, number];
-    polar?: [number, number];
-    azimuth?: [number, number];
-    config?: any;
-    children?: React.ReactNode;
-};
-export declare function PresentationControls({ snap, global, cursor, children, speed, rotation, zoom, polar, azimuth, config, }: Props): JSX.Element;
-export {};
diff --git a/node_modules/@react-three/drei/web/ScrollControls.d.ts b/node_modules/@react-three/drei/web/ScrollControls.d.ts
deleted file mode 100644
index 0683e60..0000000
--- a/node_modules/@react-three/drei/web/ScrollControls.d.ts
+++ /dev/null
@@ -1,34 +0,0 @@
-import * as React from 'react';
-export declare type ScrollControlsProps = {
-    eps?: number;
-    horizontal?: boolean;
-    infinite?: boolean;
-    pages?: number;
-    distance?: number;
-    damping?: number;
-    enabled?: boolean;
-    style?: React.CSSProperties;
-    children: React.ReactNode;
-};
-export declare type ScrollControlsState = {
-    el: HTMLDivElement;
-    eps: number;
-    fill: HTMLDivElement;
-    fixed: HTMLDivElement;
-    horizontal: boolean | undefined;
-    damping: number;
-    offset: number;
-    delta: number;
-    pages: number;
-    range(from: number, distance: number, margin?: number): number;
-    curve(from: number, distance: number, margin?: number): number;
-    visible(from: number, distance: number, margin?: number): boolean;
-};
-export declare function useScroll(): ScrollControlsState;
-export declare function ScrollControls({ eps, enabled, infinite, horizontal, pages, distance, damping, style, children, }: ScrollControlsProps): JSX.Element;
-declare type ScrollProps = {
-    html?: boolean;
-    children?: React.ReactNode;
-};
-export declare const Scroll: React.ForwardRefExoticComponent<ScrollProps & React.RefAttributes<unknown>>;
-export {};
diff --git a/node_modules/@react-three/drei/web/Select.d.ts b/node_modules/@react-three/drei/web/Select.d.ts
deleted file mode 100644
index 9e6e05c..0000000
--- a/node_modules/@react-three/drei/web/Select.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-/// <reference types="react" />
-import * as THREE from 'three';
-declare type Props = JSX.IntrinsicElements['group'] & {
-    multiple?: boolean;
-    box?: boolean;
-    border?: string;
-    backgroundColor?: string;
-    onChange?: (selected: THREE.Object3D[]) => void;
-    filter?: (selected: THREE.Object3D[]) => THREE.Object3D[];
-};
-export declare function Select({ box, multiple, children, onChange, border, backgroundColor, filter: customFilter, ...props }: Props): JSX.Element;
-export declare function useSelect(): THREE.Object3D<THREE.Event>[];
-export {};
diff --git a/node_modules/@react-three/drei/web/View.d.ts b/node_modules/@react-three/drei/web/View.d.ts
deleted file mode 100644
index 5852b6e..0000000
--- a/node_modules/@react-three/drei/web/View.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import * as React from 'react';
-import * as THREE from 'three';
-import { Size } from '@react-three/fiber';
-export declare type ContainerProps = {
-    scene: THREE.Scene;
-    index: number;
-    children?: React.ReactNode;
-    frames: number;
-    rect: React.MutableRefObject<DOMRect>;
-    track: React.MutableRefObject<HTMLElement>;
-    canvasSize: Size;
-};
-export declare type ViewProps = {
-    track: React.MutableRefObject<HTMLElement>;
-    index?: number;
-    frames?: number;
-    children?: React.ReactNode;
-};
-export declare const View: ({ track, index, frames, children }: ViewProps) => React.ReactNode;
diff --git a/node_modules/@react-three/drei/web/index.d.ts b/node_modules/@react-three/drei/web/index.d.ts
deleted file mode 100644
index f4571b8..0000000
--- a/node_modules/@react-three/drei/web/index.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-export { Html } from './Html';
-export { CycleRaycast } from './CycleRaycast';
-export { useCursor } from './useCursor';
-export { Loader } from './Loader';
-export * from './ScrollControls';
-export * from './PresentationControls';
-export * from './Select';
-export * from '../core';
-export * from './View';
diff --git a/node_modules/@react-three/drei/web/useCursor.d.ts b/node_modules/@react-three/drei/web/useCursor.d.ts
deleted file mode 100644
index 253b3d6..0000000
--- a/node_modules/@react-three/drei/web/useCursor.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare function useCursor(hovered: boolean, onPointerOver?: string, onPointerOut?: string): void;
